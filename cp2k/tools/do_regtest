#!/bin/bash

###################################################################################
# do_regtest some info [Joost VandeVondele, 2005-02-25]
#
# Regression testing cp2k ... 
#    - maintain code quality
#    - helps rapid developemnent and refactoring
#
# What does a regtest do
#    - automatically update cp2k with the current CVS version (including new tests)
#    - performs a realclean build of the source
#    - executes a list of tests
#    - compares the results (outputs) with those of the last known result (reference)
#    - produces a summary
#
# How to set up a regtest
#    - you must be able to build and run cp2k on the given machine, the rest should be 'easy'
#    - decide on a directory for doing the regtest, there will be plenty of files in this dir
#      (after a while) so make it something like $HOME/rt
#    - checkout a version of cp2k into $HOME/rt. 
#      If you set up your cvs account so that you don't need to provide
#      a passwd for doing cvs update, things will be more convenient later on.
#    - set up the arch files so that you can cleanly build cp2k (test this)
#    - cp $HOME/rt/cp2k/tools/do_regtest $HOME/rt
#    - modify the do_regtest script to match your local environment (e.g. specify 
#      if you wish a sdbg or a sopt build, which compiler, gmake, ....) see below
#    - execute './do_regtest' regularly (i.e. after comitting new code)
#
# Interpretation of the results
#  test can be:
#    - 'OK' if the results match those of a previous run precisely. The execution time is also given.
#    - 'NEW' if they have not been executed previously. The reference result is generated 
#      automatically in this run. Tests can also be 'NEW' if they have been reset, i.e. been newly 
#      added to the TEST_FILES_RESET files.
#    - 'RUNTIME FAILURE' if they stopped unexpectedly (e.g. core dump, or stop)
#    - 'WRONG RESULT' if they produce a result that deviates (even a tiny bit) from an old reference
#  the last two options generally mean that a bug has been introduced, which requires investigation.
#  since regtesting only yields information relative to a previously known result, it is most useful
#  to do a regtest before and after you make changes.
#
# Adding/resetting/creating tests to the testsuite
#  these is fully controlled by the following files in the cp2k/tests directories
#  -TEST_DIRS  : is just a list of directories that contain tests. You can add your directory here.
#  -TEST_FILES : the list of input files that need to be executed. You can add your file name here.
#                adding a comment about what it tests might help later debugging problems if a regtest
#                fails
#  -TEST_FILES_RESET : you can add files for which the reference output became invalid (e.g. bug fix)
#                      to this list fo files. However be absolutely sure that the change is due to
#                      a bug fix, do not reset these that fail because of unclear reasons. Try to add
#                      a comment to the cvs message and/or the file itself
#  -TEST_TYPES : this file allows you to create a new test type. I.e. to specify for which words should
#                be grepped and what field should be used in the numerical comparison. 
#
# Command line switches to the do_regtest script (also configurable from within the script)
#  -nocvs   : do not access the CVS for any updating, makes regtesting fully local
#  -quick   : rebuild the code if needed, but do not perform a realclean before
#  -noreset : do not reset the reference outputs automatically
#  -cvsdate string : specify any string to cvs update (most likely used as "-D 2005-02-17")
#  -skipdir string : this switch can repeat, exclude certain dirs from regtesting, useful to 
#                    speed-up regtesting after very localised changes (e.g. -skipdir QS/regtest)
#
# Script configuration. The value of the follow variables can be redefined, see below
#   dir_base, FORT_C_NAME, cp2k_version, dir_triplet, cp2k_dir, cp2k_prefix, cp2k_postfix,
#   make, awk, datum_full, datum_short,
#   nocvs, quick, cvsdate, noreset, ndirtoskip, skip_dirs
#
########################################################################################################
#
# THESE VARIABLES WILL NEED CHANGING FOR YOUR LOCAL CONFIGURATION
#
# - dir_base: the base directory for testing (e.g. $HOME/rt)
# - FORT_C_NAME: compiler selection (e.g. intel)
# - cp2k_version: sopt,sdbg,popt....
# - dir_triplet: the result of tools/get_arch_name, where the executable can be found 
# - cp2k_dir: normally cp2k
#
export FORT_C_NAME=g95
dir_base=/data1/vondele/rt/g95
cp2k_version=sdbg
dir_triplet=Linux-i686-g95
cp2k_dir=cp2k

#
# The following variables typically need no changes on Linux machine, but might need changes on
# other an OS
#

# *** how to execute an input file [ cp2k_prefix input cp2k_postfix ]
cp2k_prefix="${dir_base}/${cp2k_dir}/exe/${dir_triplet}/cp2k.${cp2k_version}"
cp2k_postfix=
#cp2k_prefix="( ulimit -t 60; ${dir_base}/${cp2k_dir}/exe/${dir_triplet}/cp2k.${cp2k_version}"
#cp2k_postfix=" )"
#cp2k_prefix="poe ${dir_base}/${cp2k_dir}/exe/${dir_triplet}/cp2k.${cp2k_version}"
#cp2k_postfix="-llfile ${dir_base}/llfile"

# *** make and awk
make=make
#make=gmake
awk=awk
#awk=nawk

# *** a short and long version of the data, in a format that CVS understands
datum_full=`date --iso-8601="seconds"`
datum_short=`date --iso-8601`
#datum_full=`date '+%Y-%m-%dT%H:%M:%S+0100'`
#datum_short=`date '+%Y-%m-%d'`

# *** default settings for command line switches
nocvs="cvs"
quick="noquick"
cvsdate="-D $datum_full"
noreset="reset"
ndirstoskip=0
skip_dirs[1]=""

###################################################################################
#
# From here on no changes to the script should be needed
#
###################################################################################
#
# command line argument passing
#
###################################################################################
while [ $# -ge 1 ]; do
case $1 in
  # build a list of directories to skip
  -skipdir) let ndirstoskip=ndirstoskip+1;
        skip_dirs[ndirstoskip]=$2;
        shift;
        ;;
  # do not update the CVS
  -nocvs) nocvs="nocvs";;
  # do not reset reference outputs
  -noreset) noreset="noreset";;
  # do not do a realclean before building
  -quick) quick="quick";;
  # specify the full string "-D 2005-02-01" to get a check-out of a specific date
  -cvsdate) cvsdate=$2; shift;;
  *)  break;;
esac
shift
done

###################################################################################
#
# set up the initial directory structures
#
###################################################################################
test_types_file=${dir_base}/${cp2k_dir}/tests/TEST_TYPES
dir_last=${dir_base}/LAST-${dir_triplet}-${cp2k_version}
dir_out=${dir_base}/TEST-${dir_triplet}-${cp2k_version}-${datum_short}
changelog_diff=${dir_out}/ChangeLog.diff
changelog_diff_tests=${dir_out}/ChangeLog-tests.diff
error_description_file=${dir_out}/error_summary
mkdir -p ${dir_out}
mkdir -p ${dir_last}
rm -fR ${error_description_file}
touch  ${error_description_file}
touch  ${dir_last}/ChangeLog-tests

###################################################################################
#
# simple function to end the tests all in the same way
#
###################################################################################
function end_test() {
echo "--------------------------------------------------------------------------"
date
echo "*************************** testing ended ********************************"
exit $1
}

###################################################################################
#
# function to grep for changes in the output. Takes five arguments
#
###################################################################################
function do_test_grep(){
 output_new=$1
 output_old=$2
 error_file=$3
 grep_string=$4
 grep_field=$5 
 e1=`grep "${grep_string}" ${output_old} | tail -1 | ${awk} -v f=${grep_field} '{print $f}'`
 e2=`grep "${grep_string}" ${output_new} | tail -1 | ${awk} -v f=${grep_field} '{print $f}'`
 big=`echo "${e1} ${e2}" | ${awk} '{v=sqrt((($1-$2)/$2)^2); if (v>1.0E-14) printf("%16.8e",v); else printf("0") ;}'`
 case ${big} in
 0)
  # ok, same energy
  return 0 ;;
 *)
  # nope too large
  echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_file}
  echo "${output_new} : " >> ${error_file}
  echo " ${grep_string} : old = ${e1} new = ${e2} " >> ${error_file}
  echo " relative error : ${big}  " >> ${error_file}
  echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_file}
  return 1 ;;
 esac 
}

###################################################################################
#
# function to select which test to run
#
###################################################################################
function do_test() {
 which_test=$1
 output_new=$2
 output_old=$3
 error_file=$4
 case ${which_test} in
 0) 
   #just be happy you executed
   return 0;;
 *)
   do_test_grep ${output_new} ${output_old} ${error_file} "${test_grep[which_test]}" "${test_col[which_test]}"
   return $? ;;
 esac
}

# *** start testing
echo "*************************** testing started ******************************"
echo " started on " `date`
echo " checking version ${cvsdate} "
echo "--------------------------- CVS ------------------------------------------"

if [[ ${nocvs} != "nocvs" ]]; then
  # *** cvs update src
  cd ${dir_base}/${cp2k_dir}/src
  cvs update -d -A ${cvsdate} &> out
  if (( $? )); then
  echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
  tail -20 out >> ${error_description_file}
  echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
  echo "error happened : no cvs update ... bailing out"
  end_test 1
  fi
  echo "cvs src update went fine"
  cp2k_lines=`wc *.F | tail -1 |  ${awk} '{print $1}'`
  echo "cp2k is now ${cp2k_lines} lines .F"
  # *** looks like cvs2cl always generates the changelog for the latest version of the repo, not the current one?
  ${dir_base}/${cp2k_dir}/tools/cvs2cl.pl &> out
  diff ChangeLog ${dir_last}/ChangeLog > ${changelog_diff}
  echo "------- differences --------" >> ${changelog_diff}
  cvs -n update ${cvsdate} &> out
  cat out | grep -v -i "changelog" | grep -v '?' | grep -v 'cvs server: Updating' >> ${changelog_diff} 
  echo "---  changelog diff src  ---"
  cat ${changelog_diff} 
  echo "----------------------------"
  cp ChangeLog ${dir_last}/ChangeLog
  
  # *** cvs update tests
  cd ${dir_base}/${cp2k_dir}/tests
  cvs update -d -A ${cvsdate} &> out
  if (( $? )); then
  echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
  tail -20 out >> ${error_description_file}
  echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
  echo "error happened : no cvs update ... bailing out"
  end_test 2
  else
  echo "cvs tests update went fine"
  fi
  ${dir_base}/${cp2k_dir}/tools/cvs2cl.pl &> out
  diff ChangeLog ${dir_last}/ChangeLog-tests > ${changelog_diff_tests}
  echo "------- differences --------" >> ${changelog_diff_tests}
  cvs -n update ${cvsdate} &> out
  cat out | grep -v -i "changelog" | grep -v '?' |  grep -v 'cvs server: Updating' >> ${changelog_diff_tests}
  echo "--- changelog diff tests ---"
  cat ${changelog_diff_tests} 
  echo "----------------------------"
  cp ChangeLog ${dir_last}/ChangeLog-tests
else
  echo "no cvs updating"
fi

# *** make realclean
if [[ ${quick} != "quick" ]]; then
   cd ${dir_base}/${cp2k_dir}/makefiles
   ${make} realclean VERSION=${cp2k_version} &> out
   if (( $? )); then
      echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
      tail -20 out >> ${error_description_file}
      echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
      echo "error happened : make realclean VERSION=${cp2k_version} ... bailing out"
      end_test 3
   else
      echo "make realclean VERSION=${cp2k_version} went fine"
   fi
else
  echo "quick testing, no realclean"
fi 

# *** from here failures are likely to be bugs in cp2k
echo "-------------------------compiling cp2k-----------------------------------"
cd ${dir_base}/${cp2k_dir}/makefiles
${make} VERSION=${cp2k_version} &> out
if (( $? )); then
echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
tail -40 out >> ${error_description_file}
echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
echo "error happened : make realclean VERSION=${cp2k_version} ... bailing out"
echo "error happened : make VERSION=${cp2k_version} "
end_test 4
else
compile_warnings=`grep "Warning:" out | wc | tail -1 |  ${awk} '{print $1}'`
echo "make VERSION=${cp2k_version} went fine (${compile_warnings} warnings)"
fi
echo "-------------------------regtesting cp2k----------------------------------"

###################################################################################
#
# parse the TEST_TYPES file to do different kinds of test (done after cvs update)
#
# tests grep for the last line in the file where a string matches (test_grep) 
# and compares a numeric field at a given column (test_col)
#
# the format of the TEST_TYPES file is (notice the '!' as a field separator, to allow
# for spaces in the test_grep)
#
# Ntest_types
# test_grep_1 ! test_col_1
# test_grep_2 ! test_col_2
# ....
# followed by comment lines
#
###################################################################################
Ntest_types=`awk -v l=1 -v c=1 'BEGIN{FS="!"}{lr=lr+1;if (lr==l) print $c}' ${test_types_file}`
test_grep[0]=""
test_col[0]=1
t=1
while [ $t -le ${Ntest_types} ]; do
test_grep[t]=`${awk} -v l=$t -v c=1 'BEGIN{FS="!"}{lr=lr+1;if (lr==l+1) print $c}' ${test_types_file}`
test_col[t]=`${awk} -v l=$t -v c=2 'BEGIN{FS="!"}{lr=lr+1;if (lr==l+1) print $c}' ${test_types_file}`
let t=t+1
done

###################################################################################
#
# *** now start testing 
# *** for a given directory we do a run on all files in TEST_FILES and
# *** do the test as indicated by the number
# *** files are run in order so that they can e.g. restart
#
###################################################################################
out_runtime_errors=""
out_wrong_results=""
n_runtime_error=0
n_wrong_results=0
n_correct=0
n_tests=0
n_new=0

#
# get a list of directories to be tested, taking care of the exclusions
#
dirs=`cat ${dir_base}/${cp2k_dir}/tests/TEST_DIRS | grep -v "#"`
newdirs=""
for dir in ${dirs}
do
  match="no"
  t=1
  # *** match to exclusion list
  while [ $t -le ${ndirstoskip} ]; do
     if [[ "${skip_dirs[t]}" == "${dir}" ]]; then
        match="yes" 
     fi
     let t=t+1
  done
  # *** if not excluded add to list of dirs
  if [[ "${match}" == "no" ]]; then
     new_dirs="$new_dirs $dir"
  fi
done
dirs=$new_dirs

#
# execute all regtests
#
for dir in ${dirs};
do
  cd ${dir_base}/${cp2k_dir}/tests/${dir}
  mkdir -p ${dir_out}/${dir}
  mkdir -p ${dir_last}/${dir}
  touch ${dir_last}/${dir}/TEST_FILES_RESET

  # 
  # first reset reference outputs that have become out-dated since the last run
  #
  diff TEST_FILES_RESET ${dir_last}/${dir}/TEST_FILES_RESET > ${dir_out}/${dir}/TEST_FILES_RESET.diff
  cp TEST_FILES_RESET ${dir_last}/${dir}/TEST_FILES_RESET
  nreset=`grep '<' ${dir_out}/${dir}/TEST_FILES_RESET.diff | grep -v '#' |  ${awk} '{c=c+1}END{print c}'`
  if [[ ${noreset} != "noreset" ]]; then
     for ((itest=1;itest<=nreset;itest++));
     do
        reset_file=`grep '<' ${dir_out}/${dir}/TEST_FILES_RESET.diff | grep -v '#' | ${awk} -v itest=$itest '{c=c+1;if (c==itest) print $2}'`
        rm -f ${dir_last}/${dir}/${reset_file}.out
     done
  fi
  #
  # run the tests now
  #
  echo "Running tests in ${dir_base}/${cp2k_dir}/tests/${dir}"
  ntest=`grep -v "#" TEST_FILES | ${awk} '{c=c+1}END{print c}'`
  for ((itest=1;itest<=ntest;itest++));
  do
     n_tests=$((n_tests+1))
     this_test=""
     input_file=`grep -v "#" TEST_FILES | ${awk} -v itest=$itest '{c=c+1;if (c==itest) print $1}'`
     # just one test right now, but this should generalize
     test_types=`grep -v "#" TEST_FILES | ${awk} -v itest=$itest '{c=c+1;if (c==itest) print $2}'`
     output_file=${dir_out}/${dir}/${input_file}.out
     output_last=${dir_last}/${dir}/${input_file}.out
     ${cp2k_prefix} ${input_file} ${cp2k_postfix} &> ${output_file}

     # *** cp2k failed obviously
     if (( $? )); then
        echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
        echo ${output_file} >> ${error_description_file}
        tail -40 ${output_file} >> ${error_description_file}
        echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
        this_test="RUNTIME FAIL"
        n_runtime_error=$((n_runtime_error+1))
        failed_tests="${failed_tests} ${output_file}"
     else 
        # *** but didn't end !?
        grep "ENDED" ${output_file} &> /dev/null
        if (( $? )); then
           echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
           echo ${output_file} >> ${error_description_file}
           tail -40 ${output_file} >> ${error_description_file}
           echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> ${error_description_file}
           this_test="RUNTIME FAIL"
           n_runtime_error=$((n_runtime_error+1))
           failed_tests="${failed_tests} ${output_file}"
        else
           # *** still running, you must be joking...
           # *** see if we manage to pass the testing
           # *** but only if we can compare
           if [ -f ${output_last} ]; then
              for test_type in ${test_types};
              do
                 do_test ${test_type} ${output_file} ${output_last} ${error_description_file}
                 if (( $? )); then
                    this_test="WRONG RESULT TEST ${test_type}"
                    n_wrong_results=$((n_wrong_results+1))
                    # *** no further testing
                    break;
                 else
                    n_correct=$((n_correct+1))
                    this_test="OK"
                 fi
              done
           else
              this_test="NEW"
              n_new=$((n_new+1))
           fi
        fi
     fi
     # Keep the output up-to-date
     case ${this_test} in
     "OK" | "NEW" )
        cp ${output_file} ${output_last} 
        timing=`grep "CP2K   " ${output_file} | ${awk} '{printf("%6.2f",$4)}'`
        this_test="${this_test} (${timing} sec)" ;;
     esac
     printf "%40s %20s\n" "${dir}/${input_file}" "${this_test}"
  done
done
echo "--------------------------------------------------------------------------"
cat "${error_description_file}"
echo "--------------------------------- summary --------------------------------"
printf "number of FAILED  tests %d\n" ${n_runtime_error}
printf "number of WRONG   tests %d\n" ${n_wrong_results}
printf "number of CORRECT tests %d\n" ${n_correct}
printf "number of NEW     tests %d\n" ${n_new}
printf "number of         tests %d\n" ${n_tests}
end_test 0
