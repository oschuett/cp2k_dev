!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000  CP2K developers group                                 !
!-----------------------------------------------------------------------------!
!!****** cp2k/fist_debug [1.0] *
!!
!!   NAME
!!     fist_debug
!!
!!   FUNCTION
!!
!!   AUTHOR
!!     CJM
!!
!!   MODIFICATION HISTORY
!!    CJM 2/01.  Passed in the variable box_ref
!!
!!   SOURCE
!******************************************************************************

MODULE fist_debug

  USE dg_types, ONLY : dg_type
  USE ewald_parameters_types, ONLY : ewald_parameters_type
  USE fist_environment_types, ONLY : replica_environment_type, &
                                     fist_thermodynamic_type
  USE fist_force_numer, ONLY : force_bond_numer, force_bend_numer, &
       force_torsion_numer, force_nonbond_numer, ewald_energy_numer, &
       pv_bond_numer, pv_bend_numer, pv_torsion_numer, ptens_numer, &
       pvg_numer, potential_g_numer, de_g_numer, ewald_force_numer, &
       pme_force_numer, pme_energy_numer
  USE fist_force,             ONLY : fist_force_control,&
                                     debug_variables_type,&
                                     get_ewald_grids
  USE global_types, ONLY : global_environment_type
  USE kinds, ONLY : dbl
  USE linklists, ONLY : bonds, bends, torsions, dist_constraints, &
       g3x3_constraints
  USE molecule_types, ONLY : molecule_structure_type, particle_node_type
  USE particle_types, ONLY : particle_type
  USE pair_potential_types, ONLY : pair_potential_type
  USE pw_grid_types, ONLY : pw_grid_type
  USE simulation_cell, ONLY : cell_type
  USE termination, ONLY : stop_memory, stop_program

  IMPLICIT NONE

  PRIVATE
  PUBLIC :: debug_control

!!*****
!******************************************************************************

CONTAINS

!******************************************************************************
!!****** fist_debug/debug_control [1.0] *
!!
!!   NAME
!!     debug_control
!!
!!   FUNCTION
!!     Routine to execute numerical tests for debugging
!!
!!   AUTHOR
!!     CJM
!!
!!   MODIFICATION HISTORY
!!     Changed Formats (JGH) 22-Nov-2000
!!     Harald Forbert (Dec-2000): Changes for multiple linked lists
!!     Torsions added (DG) 05-Dec-2000
!!     Additional output information (DG) 05-Dec-2000
!!
!!   SOURCE
!******************************************************************************

SUBROUTINE  debug_control ( globenv, rep_env, ewald_param, potparm, thermo )

  IMPLICIT NONE

! Arguments
  TYPE ( replica_environment_type ), INTENT ( INOUT ) :: rep_env
  TYPE ( ewald_parameters_type ), INTENT ( INOUT ) :: ewald_param
  TYPE ( pair_potential_type ), INTENT ( IN )  :: potparm ( :, : )
  TYPE ( fist_thermodynamic_type ), INTENT ( INOUT ) :: thermo
  TYPE ( global_environment_type ), INTENT ( INOUT ) :: globenv

! Locals
  TYPE ( cell_type ), POINTER :: box
  TYPE ( cell_type ), POINTER  :: box_ref
  TYPE ( particle_type ), POINTER  :: part ( : )
  TYPE ( particle_node_type ), POINTER  :: pnode ( : )
  TYPE ( molecule_structure_type ), POINTER :: molecule ( : )
  TYPE ( debug_variables_type ) :: dbg
  TYPE ( pw_grid_type ), POINTER :: pw_big, pw_small, pw_ewald, pw_spme
  TYPE ( dg_type ), POINTER :: dg
  INTEGER :: iflag, i, natoms, isos, iatom, iw, iwf, ir, npts_s(3), gmax
  INTEGER, DIMENSION ( 2 ) :: dum
  REAL ( dbl ) :: delta, energy_numer, cutoff, ecut
  REAL ( dbl ) :: e_numer, pv_test ( 3, 3 )
  REAL ( dbl ) :: err1, numer, denom1, vec ( 3 ), e_bc, e_real, energy_tot
  REAL ( dbl ) :: denom2, err2
  REAL ( dbl ), DIMENSION ( :, : ), ALLOCATABLE :: f_bc, f_real
  REAL ( dbl ), DIMENSION ( :, : ), ALLOCATABLE :: f_numer
  REAL ( dbl ), DIMENSION ( :, : ), ALLOCATABLE :: rel, diff
  LOGICAL, PARAMETER :: box_change = .FALSE.

!------------------------------------------------------------------------------

! Assigning local pointers
  pnode => rep_env % pnode
  part => rep_env % part
  molecule => rep_env % molecule
  box_ref => rep_env % box_ref
  box => rep_env % box

  iw = globenv % scr
  iwf = 7
  ir = 5
  WRITE ( iw, '( 16x,A )' ) &
       '***************************************************'
  WRITE ( iw, '( 16x,A )' ) '                   BEGIN FIST DEBUG'
  WRITE ( iw, '( 16x,A )' ) &
       '***************************************************'

! allocating all arrays involved with debug
  natoms = SIZE ( part )
  IF ( .NOT. ALLOCATED ( diff ) ) ALLOCATE ( diff ( 3, natoms ), STAT = isos )
  IF ( isos /= 0 ) CALL stop_memory ( "debug_control", "diff", 3 * natoms )
  IF ( .NOT. ALLOCATED ( rel ) ) ALLOCATE ( rel ( 3, natoms ), STAT = isos )
  IF ( isos /= 0 ) CALL stop_memory ( "debug_control", "rel", 3 * natoms )
  IF ( .NOT. ALLOCATED ( f_numer ) ) &
       ALLOCATE ( f_numer ( 3, natoms ), STAT = isos )
  IF ( isos /= 0 ) CALL stop_memory ( "debug_control", "f_numer", 3 * natoms )
  ALLOCATE ( dbg % f_nonbond ( 3, natoms ), STAT = isos )
  IF ( isos /= 0 ) &
       CALL stop_memory ( "debug_control", "f_nonbond", 3 * natoms )
  ALLOCATE ( dbg % f_g ( 3, natoms ), STAT = isos )
  IF ( isos /= 0 ) CALL stop_memory ( "debug_control", "f_g", 3 * natoms )
  ALLOCATE ( dbg % f_bond ( 3, natoms ), STAT = isos )
  IF ( isos /= 0 ) CALL stop_memory ( "debug_control", "f_bond", 3 * natoms )
  ALLOCATE ( dbg % f_bend ( 3, natoms ), STAT = isos )
  IF ( isos /= 0 ) CALL stop_memory ( "debug_control", "f_bend", 3 * natoms )
  ALLOCATE ( dbg % f_torsion ( 3, natoms ), STAT = isos )
  IF ( isos /= 0 ) CALL stop_memory ( "debug_control", "f_torsion", 3 * natoms )

! Call to analytical force routine:
  CALL fist_force_control ( rep_env, ewald_param, potparm, thermo, &
                       box_change, globenv, dbg )

! Debug real-space non-bonded interactions
  WRITE ( iw, '( A )' ) &
       ' DO YOU WANT TO DEBUG YOUR REAL-SPACE NON-BONDED INTERACTIONS (1=yes)?'
  READ ( ir, * ) iflag
  IF ( iflag == 1 ) THEN

! get numerical force for the non-bonded interactions
     WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
     READ ( ir, * ) delta
     IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
        delta = 1.0E-5_dbl
        WRITE ( iw, '( A, T61, G20.12 )' ) &
             ' DELTA (changed to default) = ', delta
     ELSE
        WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
     END IF
     CALL force_nonbond_numer ( box, ewald_param, part, pnode, potparm,  &
                                delta, f_numer, energy_numer )
     WRITE ( iw, '( A, T61, G20.12 )' ) &
          ' E ANA NON-BONDED = ', dbg % pot_nonbond
     WRITE ( iw, '( A, T61, G20.12 )' ) &
          ' E DBG NON-BONDED = ', energy_numer

! write out all particle numbers and forces
     WRITE ( iw, '( /,A,A )' ) &
          ' DO YOU WANT TO GET THE FORCES ON ALL PARTICLES ', &
          '(FILE=non_bonded, 1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN
        OPEN (UNIT = iwf, &
              FILE = 'non_bonded', STATUS = 'REPLACE', ACTION = 'WRITE')
        DO iatom = 1, natoms
        WRITE ( iwf, '( A,T71,I10 )' ) ' ATOM NUMBER ', iatom
        WRITE ( iwf, '( A,T21,3G20.12 )' ) &
             ' F ANA NON-BONDED =', dbg % f_nonbond(:,iatom)
        WRITE ( iwf, '( A,T21,3G20.12,/ )' ) &
             ' F NUM NON-BONDED =', f_numer(:,iatom)
        END DO
        CLOSE (iwf)
     END IF

! compute the absolute value of the differences in the forces
     diff = ABS ( ABS (dbg % f_nonbond) - ABS (f_numer) )
! find the maximum difference and the relative and absolute errors.
    IF ( .NOT. ANY ( dbg % f_nonbond == 0._dbl ) )  rel = diff / ABS (dbg % f_nonbond)

! find the maximum difference and the relative and absolute errors
     WRITE ( iw, '( A, T61, G20.12 )' ) &
          ' MAXIMUM ABSOLUTE ERROR = ', MAXVAL ( diff )
     IF ( .NOT. ANY ( dbg % f_nonbond == 0._dbl ) )  THEN
       WRITE ( iw, '( A, T61, G20.12 )' ) &
          ' MAXIMUM RELATIVE ERROR = ', MAXVAL ( rel )
     ENDIF

! write out the particle number and forces of
! the max absolute and relative error
     dum = MAXLOC ( diff )
     WRITE ( iw, '( A, T71, I10 )' ) &
          ' PARTICLE WITH MAX ABSOLUTE ERROR IS ', dum(2)
     WRITE ( iw, '( A, T21, 3G20.12 )' ) &
          ' F ANA NON-BONDED =', dbg % f_nonbond ( :, dum ( 2 ) )
     WRITE ( iw, '( A,T21,3G20.12 )' ) &
          ' F NUM NON-BONDED =', f_numer ( :, dum ( 2 ) )

     IF ( .NOT. ANY ( dbg % f_nonbond == 0._dbl ) )  THEN
       dum = MAXLOC ( rel )
       WRITE ( iw, '( A,T71,I10 )' ) &
          ' PARTICLE WITH MAX RELATIVE ERROR IS ', dum(2)
       WRITE ( iw, '( A,T21,3G20.12 )' ) &
          ' F ANA NON-BONDED =', dbg % f_nonbond ( :, dum ( 2 ) )
       WRITE ( iw, '( A,T21,3G20.12 )' ) &
          ' F NUM NON-BONDED =', f_numer ( :, dum ( 2 ) )
     ENDIF
  END IF

! Debug non-bonded virial
  WRITE ( iw, '( /,A )' ) &
       ' DO YOU WANT TO DEBUG YOUR NON-BONDED VIRIAL (1=yes)?'
  READ ( ir, * ) iflag
  IF ( iflag == 1 ) THEN

! get numerical virial
     WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
     READ ( ir, * ) delta
     IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
        delta = 1.0E-5_dbl
        WRITE ( iw, '( A, T61, G20.12 )' ) &
             ' DELTA (changed to default) = ', delta
     ELSE
        WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
     END IF
     CALL ptens_numer ( box, ewald_param, part, pnode, potparm, pv_test, delta )

! write out the virials
     WRITE ( iw, '( A )' ) ' PV ANA NON-BONDED'
     DO i = 1, 3
        WRITE ( iw, '( T21,3G20.12 )' ) dbg % pv_nonbond(i,:)
     END DO
     WRITE ( iw, '( A )' ) ' PV NUM NON-BONDED'
     DO i = 1, 3
        WRITE ( iw, '( T21,3G20.12 )' ) pv_test(i,:)
     END DO
  END IF

! Debug bonds
  IF ( bonds ) THEN
     WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO DEBUG YOUR BONDS (1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN
        WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
        READ ( ir, * ) delta
        IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
           delta = 1.0E-5_dbl
           WRITE ( iw, '( A, T61, G20.12 )' ) &
                ' DELTA (changed to default) = ', delta
        ELSE
           WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
        END IF
        CALL force_bond_numer ( molecule, f_numer, energy_numer, delta )
        WRITE ( iw, '( A, T61, G20.12 )' ) &
             ' E ANA BOND = ', dbg % pot_bond
        WRITE ( iw, '( A, T61, G20.12 )' ) &
             ' E DBG BOND = ', energy_numer

! write out all particle numbers and forces
     WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO GET THE FORCES ON ALL PARTICLES (FILE=bonds, 1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN
        OPEN (UNIT = iwf, &
              FILE = 'bonds', STATUS = 'REPLACE', ACTION = 'WRITE')
        DO iatom = 1, natoms
        WRITE ( iwf, '( A,T71,I10 )' ) ' ATOM NUMBER ', iatom
        WRITE ( iwf, '( A,T21,3G20.12 )' ) &
             ' F ANA BONDS =', dbg % f_bond(:,iatom)
        WRITE ( iwf, '( A,T21,3G20.12,/ )' ) &
             ' F NUM BONDS =', f_numer(:,iatom)
        END DO
        CLOSE (iwf)
     END IF

! compute the absolute value of the differences in the forces
        diff = ABS ( ABS (dbg % f_bond) - ABS (f_numer) )
! find the maximum difference and the relative and absolute errors.
        IF ( .NOT. ANY ( dbg % f_bond == 0._dbl ) )  rel = diff / ABS (dbg % f_bond)

! find the maximum difference and the relative and absolute errors
        WRITE ( iw, '( A,T61,G20.12 )' ) &
             ' MAXIMUM ABSOLUTE ERROR = ', MAXVAL ( diff )
        IF ( .NOT. ANY ( dbg % f_bond == 0._dbl ) ) THEN
          WRITE ( iw, '( A,T61,G20.12 )' ) &
              ' MAXIMUM RELATIVE ERROR = ', MAXVAL ( rel )
        ENDIF

! write out the particle number and forces of
! the max absolute and relative error
        dum = MAXLOC ( diff )
        WRITE ( iw, '( A,T71,I10 )' ) &
             ' PARTICLE WITH MAX ABSOLUTE ERROR IS ', dum(2)
        WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F ANA BOND =', dbg % f_bond(:,dum(2))
        WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F NUM BOND =', f_numer(:,dum(2))

        IF ( .NOT. ANY ( dbg % f_bond == 0._dbl ) ) THEN
          dum = MAXLOC ( rel )
          WRITE ( iw, '( A,T71,I10 )' ) &
             ' PARTICLE WITH MAX RELATIVE ERROR IS ', dum(2)
          WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F ANA BOND =', dbg % f_bond(:,dum(2))
          WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F NUM BOND =', f_numer(:,dum(2))
        END IF
     END IF

! Debug bond virial
     WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO DEBUG YOUR BOND VIRIAL (1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN

! get numerical virial
        WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
        READ ( ir, * ) delta
        IF ( delta >= 1 .OR. delta <= 0 ) THEN
           delta = 1.0E-5_dbl
           WRITE ( iw, '( A, T61, G20.12 )' ) &
                ' DELTA (changed to default) = ', delta
        ELSE
           WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
        END IF
        CALL pv_bond_numer ( molecule, pv_test, box, pnode, delta )

! write out the virials
        WRITE ( iw, '( A )' ) ' PV ANA BOND'
        DO i = 1, 3
           WRITE ( iw, '( T21,3G20.12 )' ) dbg % pv_bond(i,:)
        END DO
        WRITE ( iw, '( A )' ) ' PV NUM BOND'
        DO i = 1, 3
           WRITE ( iw, '( T21, 3G20.12 )' ) pv_test ( i, : )
        END DO
     END IF
  END IF

! Debug bends
  IF ( bends ) THEN
     WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO DEBUG YOUR BENDS (1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN
        WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
        READ ( ir, * ) delta
        IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
           delta = 1.0E-5_dbl
           WRITE ( iw, '( A, T61, G20.12 )' ) &
                ' DELTA (changed to default) = ', delta
        ELSE
           WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
        END IF
        CALL force_bend_numer ( molecule, f_numer, energy_numer, delta )
        WRITE ( iw, '( A, T61, G20.12 )' ) &
             ' E ANA BEND = ', dbg % pot_bend
        WRITE ( iw, '( A, T61, G20.12 )' ) &
             ' E DBG BEND = ', energy_numer

! write out all particle numbers and forces
     WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO GET THE FORCES ON ALL PARTICLES (FILE=bends, 1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN
        OPEN (UNIT = iwf, FILE = 'bends', STATUS = 'REPLACE', ACTION = 'WRITE')
        DO iatom = 1, natoms
        WRITE ( iwf, '( A,T71,I10 )' ) ' ATOM NUMBER ', iatom
        WRITE ( iwf, '( A,T21,3G20.12 )' ) &
             ' F ANA BENDS =', dbg % f_bend(:,iatom)
        WRITE ( iwf, '( A,T21,3G20.12,/ )' ) &
             ' F NUM BENDS =', f_numer(:,iatom)
        END DO
        CLOSE (iwf)
     END IF

! compute the absolute value of the differences in the forces
        diff = ABS ( ABS (dbg % f_bend) - ABS (f_numer) )
        IF ( .NOT. ANY ( dbg % f_bend == 0._dbl ) ) rel = diff / ABS (dbg % f_bend)

! find the maximum difference and the relative and absolute errors
        WRITE ( iw, '( A,T61,G20.12 )' ) &
             ' MAXIMUM ABSOLUTE ERROR = ', MAXVAL ( diff )
        IF ( .NOT. ANY ( dbg % f_bend == 0._dbl ) ) THEN
          WRITE ( iw, '( A,T61,G20.12 )' ) &
              ' MAXIMUM RELATIVE ERROR = ', MAXVAL ( rel )
        ENDIF

! write out the particle number and forces of
! the max absolute and relative error
        dum = MAXLOC ( diff )
        WRITE ( iw, '( A,T71,I10 )' ) &
             ' PARTICLE WITH MAX ABSOLUTE ERROR IS ', dum(2)
        WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F ANA BEND =', dbg % f_bend(:,dum(2))
        WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F NUM BEND =', f_numer(:,dum(2))

        IF ( .NOT. ANY ( dbg % f_bend == 0._dbl ) ) THEN
          dum = MAXLOC ( rel )
          WRITE ( iw, '( A,T71,I10 )' ) &
             ' PARTICLE WITH MAX RELATIVE ERROR IS ', dum(2)
          WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F ANA BEND =', dbg % f_bend(:,dum(2))
          WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F NUM BEND =', f_numer(:,dum(2))
        ENDIF
     END IF

! Debug bend virial
     WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO DEBUG YOUR BEND VIRIAL (1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN

! get numerical virial
        WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
        READ ( ir, * ) delta
        IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
           delta = 1.0E-5_dbl
           WRITE ( iw, '( A, T61, G20.12 )' ) &
                ' DELTA (changed to default) = ', delta
        ELSE
           WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
        END IF
        CALL pv_bend_numer ( molecule, pv_test, box, pnode, delta )

! write out the virials
        WRITE ( iw, '( A )' ) ' PV ANA BEND'
        DO i = 1, 3
           WRITE ( iw, '( T21, 3G20.12 )' ) dbg % pv_bend(i,:)
        END DO
        WRITE ( iw, '( A )' ) ' PV NUM BEND'
        DO i = 1, 3
           WRITE ( iw, '( T21, 3G20.12 )' ) pv_test(i,:)
        END DO
     END IF
  END IF

! Debug torsions
  IF ( torsions ) THEN
     WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO DEBUG YOUR TORSIONS (1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN
        WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
        READ ( ir, * ) delta
        IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
           delta = 1.0E-5_dbl
           WRITE ( iw, '( A, T61, G20.12 )' ) &
                ' DELTA (changed to default) = ', delta
        ELSE
           WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
        END IF
        CALL force_torsion_numer ( molecule, f_numer, energy_numer, delta )
        WRITE ( iw, '( A, T61, G20.12 )' ) &
             ' E ANA TORSION = ', dbg % pot_torsion
        WRITE ( iw, '( A, T61, G20.12 )' ) &
             ' E DBG TORSION = ', energy_numer

! write out all particle numbers and forces
     WRITE ( iw, '( /,A,A )' ) &
          ' DO YOU WANT TO GET THE FORCES ON ALL PARTICLES ',&
          '(FILE=torsions, 1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN
        OPEN (UNIT = iwf, &
              FILE = 'torsions', STATUS = 'REPLACE', ACTION = 'WRITE')
        DO iatom = 1, natoms
        WRITE ( iwf, '( A,T71,I10 )' ) ' ATOM NUMBER ', iatom
        WRITE ( iwf, '( A,T21,3G20.12 )' ) ' F ANA TORSION =', &
             dbg % f_torsion(:,iatom)
        WRITE ( iwf, '( A,T21,3G20.12,/ )' ) ' F NUM TORSION =', &
             f_numer(:,iatom)
        END DO
        CLOSE (iwf)
     END IF

! compute the absolute value of the differences in the forces
        diff = ABS ( ABS (dbg % f_torsion) - ABS (f_numer) )
        IF ( .NOT. ANY ( dbg % f_torsion ( :, : ) == 0._dbl ) ) rel = diff / ABS (dbg % f_torsion)

! find the maximum difference and the relative and absolute errors
        WRITE ( iw, '( A,T61,G20.12 )' ) &
             ' MAXIMUM ABSOLUTE ERROR = ', MAXVAL ( diff )
        IF ( .NOT. ANY ( dbg % f_torsion == 0._dbl ) ) THEN
          WRITE ( iw, '( A,T61,G20.12 )' ) &
             ' MAXIMUM RELATIVE ERROR = ', MAXVAL ( rel )
        ENDIF

! write out the particle number and forces of
! the max absolute and relative error
        dum = MAXLOC ( diff )
        WRITE ( iw, '( A,T71,I10 )' ) &
             ' PARTICLE WITH MAX ABSOLUTE ERROR IS ', dum(2)
        WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F ANA TORSION =', dbg % f_torsion(:,dum(2))
        WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F NUM TORSION =', f_numer(:,dum(2))

        IF ( .NOT. ANY ( dbg % f_torsion == 0._dbl ) ) THEN
          dum = MAXLOC ( rel )
          WRITE ( iw, '( A,T71,I10 )' ) &
             ' PARTICLE WITH MAX RELATIVE ERROR IS ', dum(2)
          WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F ANA TORSION =', dbg % f_torsion(:,dum(2))
          WRITE ( iw, '( A,T21,3G20.12 )' ) &
             ' F NUM TORSION =', f_numer(:,dum(2))
        ENDIF
     END IF

! Debug torsion virial
     WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO DEBUG YOUR TORSION VIRIAL (1=yes)?'
     READ ( ir, * ) iflag
     IF ( iflag == 1 ) THEN

! get numerical virial
        WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
        READ ( ir, * ) delta
        IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
           delta = 1.0E-5_dbl
           WRITE ( iw, '( A, T61, G20.12 )' ) &
                ' DELTA (changed to default) = ', delta
        ELSE
           WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
        END IF
        CALL pv_torsion_numer ( molecule, pv_test, box, pnode, delta )

! write out the virials
        WRITE ( iw, '( A )' ) ' PV ANA TORSION'
        DO i = 1, 3
           WRITE ( iw, '( T21, 3G20.12 )' ) dbg % pv_torsion(i,:)
        END DO
        WRITE ( iw, '( A )' ) ' PV NUM TORSION'
        DO i = 1, 3
           WRITE ( iw, '( T21, 3G20.12 )' ) pv_test(i,:)
        END DO
     END IF
  END IF

! Debug g-space
 IF ( ewald_param % ewald_type /= 'NONE' ) THEN
    WRITE ( iw, '( A )' ) &
         ' DO YOU WANT TO DEBUG YOUR G-SPACE INTERACTIONS (1=yes)?'
    READ ( ir, * ) iflag
    IF ( iflag == 1 ) THEN
       WRITE ( iw, '( A )' ) &
            ' DO YOU WANT TO DEBUG YOUR G-SPACE ENERGIES (1=yes)?'
       READ ( ir, * ) iflag
       IF ( iflag == 1 ) THEN
          SELECT CASE ( ewald_param % ewald_type )
          CASE ( "EWALD" )
            CALL get_ewald_grids ( pw_ewald = pw_ewald, dblgrd = dg )
          CASE ( "PME" )
            CALL get_ewald_grids ( pw_big = pw_big, pw_small = pw_small, dblgrd = dg )
          CASE ( "SPME" )
            CALL get_ewald_grids ( pw_spme = pw_spme, dblgrd = dg )
          END SELECT
          SELECT CASE ( ewald_param % ewald_type )
          CASE ( "EWALD" )
            CALL ewald_energy_numer ( ewald_param, pnode, box_ref,  &
                  pw_ewald, energy_numer, pw_ewald % ngpts_cut )
          CASE ( "PME" )
            CALL pme_energy_numer ( dg, part, box, pw_small, pw_big, &
                                    ewald_param, energy_numer )
          CASE ( "SPME" )
            CALL stop_program ( "fist_debug", " NO SPME debug routines " )
          END SELECT
          WRITE ( iw, '( A, T61, G20.12 )' ) ' G-SPACE ANA ENERGY = ', &
               dbg % pot_g
          WRITE ( iw, '( A, T61, G20.12 )' ) ' G-SPACE DBG ENERGY = ', &
               energy_numer
       END IF
       WRITE ( iw, '( A )' ) &
            ' DO YOU WANT TO DEBUG YOUR G-SPACE FORCES (1=yes)?'
       READ ( ir, * ) iflag
       IF ( iflag == 1 ) THEN
          WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
          READ ( ir, * ) delta
          IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
             delta = 1.0E-5_dbl
             WRITE ( iw, '( A, T61, G20.12 )' ) &
                  ' DELTA (changed to default) = ', delta
          ELSE
             WRITE ( iw, '( A, T61, G20.12 )' ) ' DELTA = ', delta
          END IF
          SELECT CASE ( ewald_param % ewald_type )
          CASE ( "EWALD" )
            CALL ewald_force_numer ( ewald_param, pnode, box_ref, pw_ewald, &
                                     delta, f_numer )
          CASE ( "PME" )
            CALL pme_force_numer ( delta, f_numer, dg, part, box, pw_small, &
                                   pw_big, ewald_param )
          CASE ( "SPME" )
            CALL stop_program ( "fist_debug", " NO SPME debug routines " )
          END SELECT
! write out all particle numbers and forces
          WRITE ( iw, '( /,A )' ) &
          ' DO YOU WANT TO GET THE FORCES ON ALL PARTICLES (FILE=gspace, 1=yes)?'
          READ ( ir, * ) iflag
          IF ( iflag == 1 ) THEN
             OPEN (UNIT = iwf, FILE = 'gspace', STATUS = 'REPLACE', ACTION = 'WRITE')
             DO iatom = 1, natoms
             WRITE ( iwf, '( A,T71,I10 )' ) ' ATOM NUMBER ', iatom
             WRITE ( iwf, '( A,T21,3G20.12 )' ) &
                  ' F ANA GSPACE =', dbg % f_g(:,iatom)
             WRITE ( iwf, '( A,T21,3G20.12,/ )' ) &
                  ' F NUM GSPACE =', f_numer(:,iatom)
             END DO
             CLOSE (iwf)
          END IF

! compute the absolute value of the differences in the forces

! compute the absolute value of the differences in the forces
          diff = ABS ( ABS (dbg % f_g) - ABS (f_numer) )
          IF ( .NOT. ANY ( dbg % f_g == 0._dbl ) ) rel = diff / ABS (dbg % f_g)

! find the maximum difference and the relative and absolute errors
          WRITE ( iw, '( A,T61,G20.12 )' ) 'MAXIMUM ABSOLUTE ERROR = ', &
               MAXVAL (diff)
          IF ( .NOT. ANY ( dbg % f_g == 0._dbl ) ) THEN 
            WRITE ( iw, '( A,T61,G20.12 )' ) 'MAXIMUM RELATIVE ERROR = ', &
               MAXVAL (rel)
          ENDIF

! write out the particle number and forces of the max absolute
! and relative error
          dum = MAXLOC ( diff )
          WRITE ( iw, '( A,T71,I10 )' ) &
               ' PARTICLE WITH MAX ABSOLUTE ERROR IS ', dum(2)
          WRITE ( iw, '( A,T21,3G20.12 )' ) ' F ANA G-SPACE =', &
               dbg % f_g(:,dum(2))
          WRITE ( iw, '( A,T21,3G20.12 )' ) ' F NUM G-SPACE =', &
               f_numer(:,dum(2))

          IF ( .NOT. ANY ( dbg % f_g == 0._dbl ) ) THEN 
            dum = MAXLOC ( rel )
            WRITE ( iw, '( A,T71,I10 )' ) &
               'PARTICLE WITH MAX RELATIVE ERROR IS ', dum(2)
            WRITE ( iw, '( A,T21,3G20.12 )' ) ' F ANA G-SPACE =', &
               dbg % f_g(:,dum(2))
            WRITE ( iw, '( A,T21,3G20.12 )' ) ' F NUM G-SPACE =', &
               f_numer(:,dum(2))
          END IF
       END IF

! Debug g-space virial
       WRITE ( iw, '( A )' ) &
            ' DO YOU WANT TO DEBUG YOUR G-SPACE VIRIAL (1=yes)?'
       READ ( ir, * ) iflag
       IF ( iflag == 1 ) THEN

! get numerical virial
          WRITE ( iw, '( A )' ) ' ENTER A DELTA LESS THAN 1'
          READ ( ir, * ) delta
          IF ( delta >= 1.0_dbl .OR. delta <= 0.0_dbl ) THEN
             delta = 1.0E-5_dbl
             WRITE ( iw, '( A,T71,F10.6 )' ) &
                  ' DELTA (changed to default) = ', delta
          ELSE
             WRITE ( iw, '( A,T71,F10.6 )' ) ' DELTA = ', delta
          END IF
          SELECT CASE ( ewald_param % ewald_type )
          CASE ( "EWALD" )
            CALL pvg_numer ( ewald_param, pnode, box_ref, &
                           pw_ewald, pv_test, delta )
          CASE ( "PME" )
            CALL stop_program ( "fist_debug", " NO PME debug routines " )
          CASE ( "SPME" )
            CALL stop_program ( "fist_debug", " NO SPME debug routines " )
          END SELECT

! write out the virials
          WRITE ( iw, '( A )' ) ' PV NUM G-SPACE'
          DO i = 1, 3
             WRITE ( iw, '( T21,3G20.12 )' ) pv_test(i,:)
          END DO
          WRITE ( iw, '( A )' ) ' PV ANA G-SPACE'
          DO i = 1, 3
             WRITE ( iw, '( T21,3G20.12 )' ) dbg % pv_g(i,:)
          END DO
       END IF
    END IF
 END IF

  WRITE ( iw, '( )' )
  WRITE ( iw, '( 16x, A )' ) &
       '***************************************************'
  WRITE ( iw, '( 16x, A )' ) &
       '*                     END FIST DEBUG                   *'
  WRITE ( iw, '( 16x, A )' ) &
       '***************************************************'
END SUBROUTINE debug_control

!!*****
!******************************************************************************

END MODULE fist_debug

!******************************************************************************
