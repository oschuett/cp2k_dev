[
    {
    'use':
    """USE cp_fm_struct, ONLY: cp_fm_struct_retain, cp_fm_struct_release,&
        cp_fm_struct_type
    USE cp_fm_types,  ONLY: cp_fm_type, cp_fm_p_type,&
        cp_fm_create, cp_fm_release
        """,

    'el_name':'fm',
    'el_type':'type(cp_fm_type)',
    'el_array_type':'type(cp_fm_p_type)',
    '%array_el':'%matrix',
    'el_release':'cp_fm_release',
    
    'el_struct_type':'type(cp_fm_struct_type)',
    'el_struct_release':'cp_fm_struct_release',
    'el_struct_retain':'cp_fm_struct_retain',

    'other_struct_data':'',

    'pool_create-extra_args':'',
    'pool_create-extra_args_types':'',
    'pool_create-post_init_commands':'',

    'pool_dealloc-extra_commands':'',

    'create_el-extra_args':'name,',
    'create_el-extra_args_types':'character(len=*), intent(in), optional :: name',
    'create_el-extra_args_doc':"!!     - name: the name for the new matrix (optional)\n",
    'create_el-reuse_commands':"",
    'create_el-create_commands':'    call cp_fm_create(element,matrix_struct=pool%el_struct,error=error)',
    'create_el-post_create_commands':"""
    IF (present(name)) THEN
      element%name=name
      element%print_count=0
    ELSE
      element%name="tmp-"//trim(adjustl(cp_to_string(element%id_nr)))
      element%print_count=0
      ! guarantee output unicity?
    END IF
    """,
    'same_struct_check':
    """   CALL cp_assert(pool%el_struct%id_nr==element%matrix_struct%id_nr,&
            cp_failure_level, cp_assertion_failed, routineP,&
            "pool cannot reuse matrixes with another structure "//&
CPSourceFileRef,&
            error=error,failure=failure)""",

    'create_els-extra_args':'name,',
    'create_els-extra_args_types':
      'character(len=*),intent(in),optional :: name',
    'create_els-extra_args_doc':"!!     - name: the name for the new matrixes (optional)\n",
    'create_els-local_types':"",
    'create_els-create_el_commands':
      """IF (PRESENT(name)) THEN
         call fm_pool_create_fm(pool,elements(i)%matrix,&
           name=name//"-"//ADJUSTL(cp_to_string(i)),&
           error=error)
      ELSE
         call fm_pool_create_fm(pool,elements(i)%matrix,&
           error=error)
      END IF""",
    'create_els-post_create_commands':""
    },
    {
    'use':
    """USE pw_grid_types, ONLY: pw_grid_type
    USE pw_grids, ONLY: pw_grid_retain, pw_grid_release
    USE realspace_grid_types,  ONLY: realspace_grid_type,&
        realspace_grid_p_type,&
        rs_grid_create, rs_grid_release
    USE input_section_types,  ONLY: section_vals_type
        """,

    'el_name':'rs',
    'el_type':'type(realspace_grid_type)',
    'el_array_type':'type(realspace_grid_p_type)',
    '%array_el':'%rs_grid',
    'el_release':'rs_grid_release',
    
    'el_struct_type':'type(pw_grid_type)',
    'el_struct_release':'pw_grid_release',
    'el_struct_retain':'pw_grid_retain',

    'other_struct_data':'INTEGER :: nsmax',

    'pool_create-extra_args':'nsmax,',
    'pool_create-extra_args_types':'INTEGER, INTENT(IN) :: nsmax',
    'pool_create-post_init_commands':'pool%nsmax=nsmax',

    'pool_dealloc-extra_commands':'',

    'create_el-extra_args':'',
    'create_el-extra_args_types':'',
    'create_el-extra_args_doc':"",
    'create_el-local_types':"",
    'create_el-reuse_commands':"",
    'create_el-create_commands':
      """call rs_grid_create(element,pw_grid=pool%el_struct,&
         nsmax=pool%nsmax,error=error)""",
    'create_el-post_create_commands':"",
    'same_struct_check':
    """   CALL cp_assert(pool%el_struct%id_nr==element%grid_id,&
            cp_failure_level, cp_assertion_failed, routineP,&
            "pool cannot reuse rs grids of another pw_grid "//&
            CPSourceFileRef,&
            error=error,failure=failure)""",

    'create_els-extra_args':'',
    'create_els-extra_args_types':'',
    'create_els-extra_args_doc':"",
    'create_els-local_types':"",
    'create_els-create_el_commands':
     """CALL rs_pool_create_rs(pool,elements(i)%rs_grid,&
	error=error)""",
    'create_els-post_create_commands':""
    }    
]
