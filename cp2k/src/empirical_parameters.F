!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000  CP2K developers group                                 !
!-----------------------------------------------------------------------------!
!!***** cp2k/empirical_parameters [1.0] *
!!
!!   NAME
!!     empirical_parameters
!!
!!   FUNCTION
!!   defines  the empirical parameters for the polarization code
!!   (first order hohemberg-kohn kernel and hardness kernel parameters)
!!   reads them from the set file
!!
!!   AUTHOR
!!     gloria
!!
!!   MODIFICATION HISTORY
!!
!!   SOURCE
!******************************************************************************

MODULE empirical_parameters

  USE atomic_kinds, ONLY : kind_info_type
  USE global_types, ONLY : global_environment_type
  USE kinds, ONLY : dbl
  USE message_passing, ONLY : mp_bcast
  USE parser, ONLY : parser_init, parser_end, read_line, test_next, &
       cfield, p_error, get_real, get_int, stop_parser
  USE string_utilities, ONLY : uppercase, xstring, str_search
  USE termination, ONLY : stop_memory, stop_program                               

  IMPLICIT NONE

  PRIVATE
  PUBLIC :: read_empirical_parameters, empirical_parameter_type

  TYPE empirical_parameter_type
    CHARACTER (len = 4) :: aname
    INTEGER :: nset
    INTEGER, DIMENSION (:), pointer :: l
    REAL (dbl), DIMENSION (:), POINTER :: hk_param
    REAL (dbl), DIMENSION (:), POINTER :: hardness_param
  END TYPE empirical_parameter_type

!!*****
!******************************************************************************

CONTAINS

!******************************************************************************

 SUBROUTINE read_empirical_parameters (  ki, set_fn, atom_names, empparm, globenv )

 IMPLICIT NONE

 TYPE (kind_info_type), intent(in), dimension (:) :: ki
 CHARACTER ( LEN = * ), INTENT ( IN ) :: set_fn
 CHARACTER ( len = * ), DIMENSION ( : ), INTENT ( IN ) :: atom_names
 TYPE (empirical_parameter_type), POINTER, DIMENSION (:) :: empparm
 TYPE ( global_environment_type ), INTENT ( IN ) :: globenv

! LOCALS
  INTEGER :: ierror, ilen, iw, source, group, icount, nmol_type, ios, i
  INTEGER :: nkind, nset, iset, iat, natom_types
  CHARACTER ( LEN = 20 ) :: string, string2
  CHARACTER ( LEN = 6 ) :: label, aname, merda, shit
  CHARACTER ( LEN = 6 ), POINTER, DIMENSION (:) :: element_symbol
  TYPE (empirical_parameter_type), POINTER, DIMENSION (:) :: read_ep


  iw = globenv % scr
  icount = 0
  nkind = 0

  ALLOCATE (read_ep(size(ki)), stat = ios)
  IF (ios /= 0 ) CALL stop_memory &
       ( 'read_empirical_parameters', 'read_ep', nkind )
  ALLOCATE (empparm(size(ki)), stat = ios)
  IF (ios /= 0 ) CALL stop_memory &
       ( 'read_empirical_parameters', 'empparm', nkind )
  ALLOCATE (element_symbol(size(ki)), stat = ios)
  IF (ios /= 0 ) CALL stop_memory &
       ( 'read_emporical_parameters', 'elementsymbol', nkind )
  

!..parse the input section
  label = '&EMPIRICAL'
  CALL parser_init ( set_fn, label, ierror, globenv )
  IF ( ierror /= 0 ) THEN
     IF ( globenv % ionode ) THEN
        WRITE ( iw, '( A )' ) ' No input section &EMPIRICAL found on file '
        WRITE ( iw, '( T2, A )' ) set_fn
     END IF
     CALL stop_parser ( 'read_empirical_parameters', '&EMPIRICAL' )
  ELSE
     CALL read_line
     DO WHILE (test_next()/='X')
        ilen = 8
        CALL cfield(string,ilen)
        natom_types = SIZE ( atom_names )
        iat = str_search(atom_names,natom_types,string)
	nkind = nkind + 1

        DO
           CALL read_line
           ilen = 8
           CALL cfield(string2,ilen)
           CALL uppercase ( string2 )

           SELECT CASE (string2)
           CASE DEFAULT
              CALL p_error()
              CALL stop_parser ( 'read_empirical_parameter','unknown option')

           CASE ( 'NSET')
              nset = get_int()
              read_ep (iat) % nset =  nset     

              IF ( read_ep (iat) % nset  > 0) THEN
                 ALLOCATE (read_ep(iat)%l(nset), STAT = ios)
                 ALLOCATE (read_ep(iat)%hk_param(nset), stat = ios)
                 ALLOCATE (read_ep(iat)%hardness_param(nset), stat = ios)
                 IF (ios /= 0 ) CALL stop_memory &
                      ( 'read_emporical_parameters', 'read_ep%l', nset )
		 element_symbol (iat)  = string
              END IF                                              

           CASE ( 'EMPAR')
               i =  get_int ()
               read_ep(iat) % l (i) = get_int()
               read_ep(iat) % hk_param (i) =  get_real()
               read_ep(iat) % hardness_param (i) =  get_real()
	      
           CASE ( 'END')
                 ilen = 0
                 CALL cfield(string2,ilen)
                 EXIT
           END SELECT

        END DO
	   
        CALL read_line

     END DO
      
  END IF

  CALL parser_end                                                    

! map the empirical parameter to the corresponding structure
! and checks that the mapping is the same as in kind_info

  IF (nkind /= size(ki)) CALL stop_program ('read_empirical_parameters', &
     'inconsistent number of polarizable atomic kinds')

  DO i = 1, nkind
  
     aname = ki(i)% element_symbol
     iat = str_search(element_symbol,nkind,aname)

     empparm (i) % aname = aname
     nset = read_ep(iat)% nset
     empparm (i) % nset = read_ep(iat)% nset

     IF (empparm(i)% nset /= ki(i) % orb_basis_set % nset) CALL stop_program &
       ('read_empirical_parameters', 'number of polarizable sets not matching')
       
     ALLOCATE ( empparm(i) % l (nset), STAT = ios )
     ALLOCATE ( empparm(i) % hk_param (nset), stat = ios )
     ALLOCATE ( empparm(i) % hardness_param (nset), stat = ios )

     IF (ios /= 0 ) CALL stop_memory &
                ( 'read_molecule_section', 'empparm%l', nset )

     DO iset = 1, nset 
      
       empparm(i) % l (iset) = read_ep ( iat ) % l (iset)
       empparm(i) % hk_param (iset) = read_ep ( iat ) % hk_param (iset)
       empparm(i) % hardness_param (iset) = read_ep ( iat ) % hardness_param (iset)

     END DO
  END DO
  
! ..write some information to output

  IF (globenv%ionode) THEN

     IF (globenv%print_level>=0) THEN
     
        DO i = 1, nkind
	
           WRITE ( iw, '( A,T61,A )' ) ' EMPIRICAL_PARAMETERS| atom type ', &
                ADJUSTR ( empparm(i) % aname )      
           WRITE ( iw, '( A,T71,I10 )' ) ' EMPIRICAL_PARAMETERS| Number of sets ', &
                empparm(i) % nset
		
           DO iset = 1, empparm (i) % nset     
	   
              WRITE ( iw, '( A,T71,I10 )' ) ' EMPIRICAL| angular momentum number ', &
	           empparm(i) % l (iset)

              WRITE ( iw, '( A,T71,F12.6 )' ) ' EMPIRICAL| Hohemberg-Kohn parameter ', &
	           empparm(i) % hk_param (iset)
		   
              WRITE ( iw, '( A,T71,F12.6 )' ) ' EMPIRICAL| Hardness parameter ', &
	           empparm(i) % hardness_param (iset)
           END DO                                                       
 
           WRITE ( iw,'( )' )

        END DO
	
     END IF                        

  END IF                        
  
! deallocates 
  
  DO i = 1, nkind

     IF (ASSOCIATED (read_ep (i) %l)) DEALLOCATE (read_ep (i) %l, stat = ios)
        IF (ios /= 0 ) CALL stop_memory &
                ( 'read_molecule_section', ' deallocate read_ep%l' )

     IF (ASSOCIATED(read_ep (i) %hk_param)) DEALLOCATE (read_ep (i) %hk_param, stat = ios)
        IF (ios /= 0 ) CALL stop_memory &
                ( 'read_molecule_section', ' deallocate read_ep%hk_param' )

     IF (ASSOCIATED(read_ep (i) %hardness_param )) &
              DEALLOCATE (read_ep (i) % hardness_param, stat = ios)
        IF (ios /= 0 ) CALL stop_memory &
                ( 'read_molecule_section', ' deallocate read_ep%l' )

  END DO		

  IF (ASSOCIATED(read_ep)) DEALLOCATE (read_ep, stat = ios)
     IF (ios /= 0 ) CALL stop_memory &
             ( 'read_molecule_section', ' deallocate read_ep' )

END SUBROUTINE read_empirical_parameters
 
!!*****
!******************************************************************************              

END MODULE empirical_parameters

!!*****
!******************************************************************************
