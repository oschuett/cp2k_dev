! *****************************************************************************
    SUBROUTINE xyz_to_vab_@<la_max_local>@_@<lb_max_local>@

    INTEGER :: my_rank,ierror

    REAL(kind=dp) :: alpha(0:(@<la_max_local>@+@<lb_max_local>@),0:@<la_max_local>@,0:@<lb_max_local>@,3)
    REAL(kind=dp) :: coef_ttz(0:@<la_max_local>@,0:@<lb_max_local>@)
    REAL(kind=dp) :: coef_tyz(0:@<la_max_local>@,0:@<lb_max_local>@,0:@<la_max_local>@,0:@<lb_max_local>@)
    
    coef_xyz=coef_xyz*prefactor

!   *** initialise the coefficient matrix, we transform the sum
!
!   sum_{lxa,lya,lza,lxb,lyb,lzb} P_{lxa,lya,lza,lxb,lyb,lzb} (x-a_x)**lxa (y-a_y)**lya (z-a_z)**lza (x-b_x)**lxb (y-a_y)**lya (z-a_z)**lza
!
!   into
!
!   sum_{lxp,lyp,lzp} P_{lxp,lyp,lzp} (x-p_x)**lxp (y-p_y)**lyp (z-p_z)**lzp
!
!   where p is center of the product gaussian, and lp = la_max + lb_max
!   (current implementation is l**7)
!
!
!   compute polynomial expansion coefs -> (x-a)**lxa (x-b)**lxb -> sum_{ls} alpha(ls,lxa,lxb,1)*(x-p)**ls
!
!   *** make the alpha matrix ***

!**** RR : Values of la_max and lb_max
!    call MPI_COMM_RANK(MPI_COMM_WORLD, my_rank, ierror)
!    WRITE(100+my_rank,*) "la=",la_max_local,"lb=",lb_max_local
!****
    alpha(:,:,:,:)=0.0_dp

    <$--(for iaxis in range(1,3+1))-->
    DO lxa=0,@<la_max_local>@
    DO lxb=0,@<lb_max_local>@
       binomial_k_lxa=1.0_dp
       a=1.0_dp
       DO k=0,lxa
        binomial_l_lxb=1.0_dp
        b=1.0_dp
        DO l=0,lxb
           alpha(lxa-l+lxb-k,lxa,lxb,@<iaxis>@)=alpha(lxa-l+lxb-k,lxa,lxb,@<iaxis>@)+ &
                             binomial_k_lxa*binomial_l_lxb*a*b
           binomial_l_lxb=binomial_l_lxb*REAL(lxb-l,dp)/REAL(l+1,dp)
           b=b*(rp(@<iaxis>@)-(ra(@<iaxis>@)+rab(@<iaxis>@)))
        ENDDO
        binomial_k_lxa=binomial_k_lxa*REAL(lxa-k,dp)/REAL(k+1,dp)
        a=a*(-ra(@<iaxis>@)+rp(@<iaxis>@))
       ENDDO
    ENDDO
    ENDDO
    <$--(end)-->

    !
    !   compute v_{lxa,lya,lza,lxb,lyb,lzb} given v_{lxp,lyp,lzp} and alpha(ls,lxa,lxb,1)
    !   use a three step procedure
    !

    lxyz=0
    DO lzp=0,@<la_max_local + lb_max_local>@
       coef_tyz=0.0_dp
       DO lyp=0,@<la_max_local + lb_max_local>@-lzp
          coef_ttz=0.0_dp
          DO lxp=0,@<la_max_local + lb_max_local>@-lzp-lyp
             lxyz=lxyz+1
             DO lxb=0,@<lb_max_local>@
             DO lxa=0,@<la_max_local>@
                coef_ttz(lxa,lxb)=coef_ttz(lxa,lxb)+coef_xyz(lxyz)*alpha(lxp,lxa,lxb,1)
             ENDDO
             ENDDO

          ENDDO ! lxp

          DO lyb=0,@<lb_max_local>@
          DO lya=0,@<la_max_local>@
             DO lxb=0,@<lb_max_local>@-lyb
             DO lxa=0,@<la_max_local>@-lya
                coef_tyz(lxa,lxb,lya,lyb)=coef_tyz(lxa,lxb,lya,lyb)+coef_ttz(lxa,lxb)*alpha(lyp,lya,lyb,2)
             ENDDO
             ENDDO
          ENDDO
          ENDDO

       ENDDO !lyp

       DO lzb=0,@<lb_max_local>@
       DO lza=0,@<la_max_local>@
          DO lyb=0,@<lb_max_local>@-lzb
          DO lya=0,@<la_max_local>@-lza
             DO lxb=MAX(lb_min_local-lzb-lyb,0),@<lb_max_local>@-lzb-lyb
             jco=coset(lxb,lyb,lzb)
             DO lxa=MAX(la_min_local-lza-lya,0),@<la_max_local>@-lza-lya
                ico=coset(lxa,lya,lza)
                vab(ico,jco)=vab(ico,jco)+coef_tyz(lxa,lxb,lya,lyb)*alpha(lzp,lza,lzb,3)
             ENDDO
             ENDDO
          ENDDO
          ENDDO
       ENDDO
       ENDDO

    ENDDO

    END SUBROUTINE xyz_to_vab_@<la_max_local>@_@<lb_max_local>@
