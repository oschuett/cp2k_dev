!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000 - 2006  CP2K developers group                          !
!-----------------------------------------------------------------------------!
!!****s* cp2k/qmmm_pw_grid [1.1] *
!!
!!   NAME
!!     qmmm_pw_grid
!!
!!   FUNCTION
!!     sets variables for the qmmm pool of pw_types
!!
!!   AUTHOR
!!     Teodoro Laino
!!
!!   MODIFICATION HISTORY
!!
!!   SOURCE
!******************************************************************************
MODULE qmmm_pw_grid
  USE cell_types,                      ONLY: cell_type
  USE cp_para_types,                   ONLY: cp_para_env_type
  USE input_constants,                 ONLY: do_qmmm_gauss, do_par_atom
  USE kinds,                           ONLY: dp
  USE pw_env_types,                    ONLY: pw_env_get,&
                                             pw_env_type
  USE pw_grid_types,                   ONLY: pw_grid_type,&
       PW_MODE_DISTRIBUTED, PW_MODE_LOCAL
  USE pw_grids,                        ONLY: pw_grid_create_copy_no_pbc,&
                                             pw_grid_release
  USE pw_pool_types,                   ONLY: pw_pool_create,&
                                             pw_pool_p_type,&
                                             pw_pool_type,&
                                             pw_pools_dealloc
  USE qmmm_types,                      ONLY: qmmm_env_qm_type
  USE timings,                         ONLY: timeset,&
                                             timestop
#include "cp_common_uses.h"

  IMPLICIT NONE

  PRIVATE
  PUBLIC :: qmmm_pw_grid_init
  CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qmmm_pw_grid'

CONTAINS

!!****f* qmmm_pw_grid/qmmm_pw_grid_init [1.0] *
!!
!!   NAME
!!     qmmm_pw_grid_init
!!
!!   FUNCTION
!!     Initialize the qmmm pool of pw_type.
!!     Then Main difference w.r.t. QS pw_type pools is that this pool
!!     has [0,L] as boundaries.
!!
!!   NOTES
!!     -
!!
!!   INPUTS
!!     - error: variable to control error logging, stopping,... 
!!       see module cp_error_handling 
!!
!!   AUTHOR
!!     Teodoro Laino
!!
!!   MODIFICATION HISTORY
!!     08.2004 created [tlaino]
!!
!!*** **********************************************************************
  SUBROUTINE qmmm_pw_grid_init(qmmm_env, pw_env, cell, para_env, error)
    TYPE(qmmm_env_qm_type), POINTER          :: qmmm_env
    TYPE(pw_env_type), POINTER               :: pw_env
    TYPE(cell_type), POINTER                 :: cell
    TYPE(cp_para_env_type), POINTER          :: para_env
    TYPE(cp_error_type), INTENT(inout)  &
                                             :: error

    CHARACTER(len=*), PARAMETER :: routineN = 'qmmm_pw_grid_init', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: auxbas_grid, Ilevel, stat
    LOGICAL                                  :: failure
    REAL(KIND=dp), DIMENSION(3)              :: Maxdr, Mindr
    TYPE(pw_grid_type), POINTER              :: el_struct
    TYPE(pw_pool_p_type), DIMENSION(:), &
      POINTER                                :: pw_pools
    TYPE(pw_pool_type), POINTER              :: pool
    INTEGER                                  :: pw_mode

    NULLIFY(el_struct)
    failure = .FALSE.
    Maxdr   = TINY(0.0_dp)
    Mindr   = HUGE(0.0_dp)
    IF (qmmm_env%qmmm_coupl_type == do_qmmm_gauss) THEN 
       CALL pw_env_get(pw_env=pw_env,&
                       pw_pools=pw_pools,&
                       auxbas_grid=auxbas_grid,&
                       error=error)
       !
       IF (ASSOCIATED(qmmm_env%aug_pools)) THEN
          CALL pw_pools_dealloc(qmmm_env%aug_pools,error=error)
       END IF
       ALLOCATE(qmmm_env%aug_pools(SIZE(pw_pools)),stat=stat)
       CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
       !
       DO Ilevel = 1, SIZE(pw_pools)
          NULLIFY(pool, qmmm_env%aug_pools(Ilevel)%pool)
          pool      => pw_pools(Ilevel)%pool
          NULLIFY(el_struct)
          pw_mode = PW_MODE_DISTRIBUTED
          ! Parallelization scheme
          IF (qmmm_env%par_scheme==do_par_atom) THEN
             pw_mode = PW_MODE_LOCAL
          END IF

          CALL pw_grid_create_copy_no_pbc(pool%pw_grid,el_struct, cell=cell,&
               pw_mode=pw_mode, error=error)
          CALL pw_pool_create(qmmm_env%aug_pools(Ilevel)%pool,&
               pw_grid=el_struct,error=error)

          Maxdr = MAX(Maxdr,el_struct%dr)
          Mindr = MIN(Mindr,el_struct%dr)
          IF (ALL(Maxdr.EQ.el_struct%dr)) qmmm_env%gridlevel_info%coarser_grid = Ilevel
          IF (ALL(Mindr.EQ.el_struct%dr)) qmmm_env%gridlevel_info%auxbas_grid  = Ilevel

          CALL pw_grid_release(el_struct,error=error)
          
       END DO
    END IF

  END SUBROUTINE qmmm_pw_grid_init

END MODULE qmmm_pw_grid
