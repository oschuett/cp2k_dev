!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2002  CP2K developers group                                 !
!-----------------------------------------------------------------------------!

#include "cp_prep_globals.h"
[defines]
!!****h* cp2k/cp_array_[nametype1]_utils [1.0] *
!!
!!   NAME
!!     cp_array_[nametype1]_utils
!!
!!   FUNCTION
!!     various utilities that regard array of different kinds:
!!     output, allocation,...
!!
!!   NOTES
!!     This is a template
!!
!!     **** DO NOT MODIFY THE .F FILES ****
!!     modify the .template and .instantition files
!!
!!     maybe it is not a good idea mixing output and memeory utils...
!!
!!   AUTHOR
!!     @author Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     12.2001 first version [fawzi]
!!     3.2002 templatized [fawzi]
!!
!!   SOURCE
!****************************************************************************
MODULE cp_array_[nametype1]_utils
  USE kinds, ONLY: dp
  USE cp_log_handling, ONLY: cp_to_string, cp_failure_level, cp_warning_level,&
       cp_note_level, cp_log, cp_logger_type, cp_logger_generate_filename
  USE cp_error_handling, ONLY: cp_debug, cp_error_type, cp_assert, cp_a_l, &
       cp_error_message,cp_assertion_failed, cp_internal_error,&
       cp_error_init, cp_error_dealloc_ref
  USE global_types, ONLY: global_environment_type
  USE timings, ONLY: timeset, timestop
  USE cp_output_handling
  USE qs_parser, ONLY: open_file, close_file
  USE machine, ONLY: m_flush
  [USE]
  IMPLICIT NONE
  PRIVATE

  LOGICAL, PRIVATE, PARAMETER :: debug_this_module=.TRUE.
  CHARACTER(len=*), PRIVATE, PARAMETER :: moduleN='cp_array_[nametype1]_utils'

  ! types
  PUBLIC :: cp_1d_[nametype1]_p_type, cp_2d_[nametype1]_p_type,&
       cp_3d_[nametype1]_p_type

  ! generic interfaces
  PUBLIC :: cp_output, cp_guarantee_size, cp_write
  
  ! the underlying procedures
  PUBLIC :: cp_1d_[nametype1]_output, cp_2d_[nametype1]_output,&
       cp_3d_[nametype1]_output,&
       cp_1d_[nametype1]_guarantee_size, cp_[nametype1]_write,&
       cp_1d_[nametype1]_write, cp_2d_[nametype1]_write,&
       cp_3d_[nametype1]_write,&
       cp_2d_[nametype1]_guarantee_size,&
       cp_1d_[nametype1]_bsearch

  INTERFACE cp_output
     MODULE PROCEDURE cp_1d_[nametype1]_output, &
          cp_2d_[nametype1]_output
  END INTERFACE
  INTERFACE cp_guarantee_size
     MODULE PROCEDURE cp_1d_[nametype1]_guarantee_size,&
          cp_2d_[nametype1]_guarantee_size
  END INTERFACE
  INTERFACE cp_write
     MODULE PROCEDURE cp_[nametype1]_write, cp_1d_[nametype1]_write,&
       cp_2d_[nametype1]_write
  END INTERFACE
!***
!****************************************************************************
  
  !!****s* cp_array_[nametype1]_utils/cp_1d_[nametype1]_p_type [1.0] *
  !!
  !!   NAME
  !!     cp_1d_[nametype1]_p_type
  !!
  !!   FUNCTION
  !!     represent a pointer to a 1d array
  !!
  !!   NOTES
  !!     -
  !!
  !!   ATTRIBUTES
  !!     -
  !!
  !!   AUTHOR
  !!     fawzi
  !!
  !!   MODIFICATION HISTORY
  !!     02.2003 created [fawzi]
  !!
  !!   SOURCE
  !***************************************************************************
  type cp_1d_[nametype1]_p_type
     [type1], dimension(:), pointer :: array
  end type cp_1d_[nametype1]_p_type
  !!***
  !****************************************************************************

  !!****s* cp_array_[nametype1]_utils/cp_2d_[nametype1]_p_type [1.0] *
  !!
  !!   NAME
  !!     cp_2d_[nametype1]_p_type
  !!
  !!   FUNCTION
  !!     represent a pointer to a 2d array
  !!
  !!   NOTES
  !!     -
  !!
  !!   ATTRIBUTES
  !!     -
  !!
  !!   AUTHOR
  !!     fawzi
  !!
  !!   MODIFICATION HISTORY
  !!     02.2003 created [fawzi]
  !!
  !!   SOURCE
  !***************************************************************************
  type cp_2d_[nametype1]_p_type
     [type1], dimension(:,:), pointer :: array
  end type cp_2d_[nametype1]_p_type
  !!***
  !****************************************************************************

  !!****s* cp_array_[nametype1]_utils/cp_3d_[nametype1]_p_type [1.0] *
  !!
  !!   NAME
  !!     cp_3d_[nametype1]_p_type
  !!
  !!   FUNCTION
  !!     represent a pointer to a 3d array
  !!
  !!   NOTES
  !!     -
  !!
  !!   ATTRIBUTES
  !!     -
  !!
  !!   AUTHOR
  !!     fawzi
  !!
  !!   MODIFICATION HISTORY
  !!     02.2003 created [fawzi]
  !!
  !!   SOURCE
  !***************************************************************************
  type cp_3d_[nametype1]_p_type
     [type1], dimension(:,:,:), pointer :: array
  end type cp_3d_[nametype1]_p_type
  !!***
  !****************************************************************************

CONTAINS

!!****f* cp_array_[nametype1]_utils/cp_[nametype1]_write *
!!
!!   NAME
!!     cp_[nametype1]_write
!!
!!   FUNCTION
!!     writes an element to the given unit
!!
!!   NOTES
!!     -
!!
!!   INPUTS
!!     element: the element to write
!!     unit_nr: the unit to write to (defaults to the standard out)
!!     el_format: the format of a single element
!!     error: variable to control error logging, stopping,... 
!!            see module cp_error_handling 
!!
!!   AUTHOR
!!     Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     4.2002 created [fawzi]
!!
!!*** **********************************************************************
SUBROUTINE cp_[nametype1]_write(element, unit_nr, el_format, error)
  [type1], INTENT(in) :: element
  INTEGER, INTENT(in) :: unit_nr
  CHARACTER(len=*), INTENT(in), OPTIONAL :: el_format
  TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error
  
  LOGICAL :: failure
  INTEGER :: iostat
  CHARACTER(len=*), PARAMETER :: routineN='cp_[nametype1]_write',&
        routineP=moduleN//':'//routineN
  CHARACTER(len=*), PARAMETER :: defaultFormat=[defaultFormatType1]
  failure=.FALSE.
  
  IF (PRESENT(el_format)) THEN
     WRITE(unit=unit_nr,fmt=el_format,iostat=iostat) element
  ELSE
     WRITE(unit=unit_nr,fmt=defaultFormat,iostat=iostat) element
  END IF
  CPInvariant(iostat==0,cp_failure_level,routineP,error,failure)
END SUBROUTINE cp_[nametype1]_write
!***************************************************************************


!!****f* cp_array_[nametype1]_utils/cp_1d_[nametype1]_output [1.0] *
!!
!!   NAME
!!     cp_1d_[nametype1]_output
!!
!!   FUNCTION
!!     writes a 1d array to an aptly named file
!!
!!   NOTES
!!     The filename is written as note to the log.
!!     At the moment outputs the comment precede by a # and then the whole
!!     with newlines between the entries, i.e. as a (n x 1) matrix.
!!
!!   INPUTS
!!     - logger: the logger that decides where the logging should go
!!     - outputName: the name of the output, for example 'hamiltonian'
!!     - fromWhere: string of the form module:function or file:lineNr
!!       that says where the error happend
!!     - iter: the iteration number, or some other number that permit to 
!!       differentiate between different instances of the same object
!!     - array: the array to output
!!     - comment: an (optional) comment that is written before the array
!!     - local: if true each task writes its own file, otherwise (the default)
!!       only the source writes its data
!!     - el_format: the (optional) format of a single number
!!     - error: variable to control error logging, stopping,... 
!!       see module cp_error_handling 
!!
!!   AUTHOR
!!     @author Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     12.2001 first version [fawzi]
!!     03.2002 templatized [fawzi]
!!     04.2002 separated write routine [fawzi]
!!     06.2002 write to a separate file [fawzi]
!!     08.2002 added local/global output [fawzi]
!!
!!*** **********************************************************************
SUBROUTINE cp_1d_[nametype1]_output(logger, outputName,&
     fromWhere, iter, array,&
     comment, local, el_format, error)
  TYPE(cp_logger_type), POINTER ::logger
  CHARACTER(len=*) , INTENT(in) :: outputName
  CHARACTER(len=*), INTENT(in):: fromWhere
  INTEGER, INTENT(in) :: iter
  [type1], INTENT(in), DIMENSION(:) :: array
  CHARACTER(len=*), INTENT(in),OPTIONAL :: comment, el_format
  LOGICAL, INTENT(in), OPTIONAL :: local
  TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error

  LOGICAL :: failure, exists, loc
  CHARACTER(len=*), PARAMETER :: routineN='cp_1d_[nametype1]_output',&
       routineP=moduleN//':'//routineN
  CHARACTER(len=60) :: filename
  INTEGER :: handle, unitNr, lenFormat, iostat, i
  failure=.FALSE.; loc=.FALSE.

  CALL timeset(routineN//','//moduleN,'I',"",handle)
  IF (PRESENT(local)) loc=local
  IF (loc .OR. logger%para_env%mepos==logger%para_env%source) THEN
     IF (cp_would_output(logger, outputName , fromWhere, iter,&
          local=loc,error=error)) THEN

        CALL cp_logger_generate_filename(logger,filename,&
             TRIM(outputName)//'-'//TRIM(ADJUSTL(cp_to_string(iter))),&
             '.dat',local=loc)
        CALL cp_log(logger, cp_note_level, fromWhere,&
             "writing output to file'"//TRIM(filename)//"'") 
        INQUIRE (FILE=TRIM(filename),EXIST=exists)
        CALL cp_assert(.NOT.exists, cp_warning_level,cp_assertion_failed,&
             fromWhere=routineP,message=" overwriting file '"//filename//"'",&
             error=error)
        CALL open_file(TRIM(filename),file_status="unknown",&
             file_action="write",&
             unit_number=unitNr)

        IF (PRESENT(comment)) THEN
           WRITE(unit=unitNr,fmt='(" ",a,a)',iostat=iostat) '# ',comment
           CPInvariant(iostat==0,cp_failure_level,routineP,error,failure)
        END IF
        IF (.NOT.failure) THEN
           CALL cp_1d_[nametype1]_write(array,unit_nr=unitNr,&
                el_format=el_format,error=error)
        END IF

        CALL close_file(unitNr)
     END IF
  END IF
  CALL timestop(0.0_dp,handle)
END SUBROUTINE cp_1d_[nametype1]_output
!***************************************************************************

!!****f* cp_array_[nametype1]_utils/cp_1d_[nametype1]_write [1.0] *
!!
!!   NAME
!!     cp_1d_[nametype1]_write
!!
!!   FUNCTION
!!     writes an array to the given unit
!!
!!   NOTES
!!     maybe I will move to a comma separated paretized list
!!
!!   INPUTS
!!     array: the array to write
!!     unit_nr: the unit to write to (defaults to the standard out)
!!     el_format: the format of a single element
!!     error: variable to control error logging, stopping,... 
!!            see module cp_error_handling 
!!
!!   AUTHOR
!!     Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     4.2002 created [fawzi]
!!
!!*** **********************************************************************
SUBROUTINE cp_1d_[nametype1]_write(array, unit_nr, el_format, error)
  [type1], DIMENSION(:), INTENT(in) :: array
  INTEGER, INTENT(in) :: unit_nr
  CHARACTER(len=*), INTENT(in), OPTIONAL :: el_format
  TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error
  
  LOGICAL :: failure
  INTEGER :: iostat, i
  CHARACTER(len=*), PARAMETER :: routineN='cp_1d_[nametype1]_write',&
        routineP=moduleN//':'//routineN
  CHARACTER(len=*), PARAMETER :: defaultFormat=[defaultFormatType1]
  
  failure=.false.
  WRITE(unit=unit_nr,fmt="('( ')",advance="no", iostat=iostat)
  CPPrecondition(iostat==0,cp_failure_level,routineP,error,failure)  
  IF (.NOT.failure) THEN
     IF (PRESENT(el_format)) THEN
        DO i=1,SIZE(array)-1
           WRITE(unit=unit_nr,fmt=el_format,advance="no") array(i)
           WRITE(unit=unit_nr,fmt="(',')",advance="no")
        END DO
        IF (SIZE(array)>0) &
             WRITE(unit=unit_nr,fmt=el_format,advance="no") array(SIZE(array))
     ELSE
        DO i=1,SIZE(array)-1
           WRITE(unit=unit_nr,fmt=defaultFormat,advance="no") array(i)
           WRITE(unit=unit_nr,fmt="(',')",advance="no")
        END DO
        IF (SIZE(array)>0) &
             WRITE(unit=unit_nr,fmt=defaultFormat,advance="no") array(SIZE(array))
     END IF
     WRITE(unit=unit_nr,fmt="(' )')")
  END IF
  call m_flush(unit_nr)

END SUBROUTINE cp_1d_[nametype1]_write
!***************************************************************************

!!****f* cp_array_[nametype1]_utils/cp_2d_[nametype1]_output *
!!
!!   NAME
!!     cp_2d_[nametype1]_output
!!
!!   FUNCTION
!!     writes a 2d array to an aptly named file
!!
!!   NOTES
!!     The filename is written as note to the log.
!!     At the moment outputs the comment precede by a # and then the whole
!!     with spaces between the entries (with the default format) and newlines
!!     between the rows of the matrix. 
!!
!!   INPUTS
!!     logger: the logger that decides where the logging should go
!!     outputName: the name of the output, for example 'hamiltonian'
!!     fromWhere: string of the form module:function or file:lineNr
!!                that says where the error happend
!!     iter: the iteration number, or some other number that permit to 
!!           differentiate between different instances of the same object
!!     array: the array to output
!!     local: if the output is local to each task
!!     el_format: the (optional) format of a single number
!!     local: if the output is local to this task (defaults to false)
!!     error: variable to control error logging, stopping,... 
!!            see module cp_error_handling 
!!
!!   AUTHOR
!!     @author Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     12.2001 first version [fawzi]
!!     03.2002 templatized [fawzi]
!!     04.2002 separated write routine [fawzi]
!!     06.2002 write to a separate file [fawzi]
!!     08.2002 added local/global output [fawzi]
!!
!!*** **********************************************************************
SUBROUTINE cp_2d_[nametype1]_output(logger, outputName, &
     fromWhere, iter, array,&
     comment, local, el_format, error)
  TYPE(cp_logger_type), POINTER ::logger
  CHARACTER(len=*) , INTENT(in) :: outputName
  CHARACTER(len=*), INTENT(in):: fromWhere
  INTEGER, INTENT(in) :: iter
  [type1], INTENT(in), DIMENSION(:,:) :: array
  CHARACTER(len=*), INTENT(in),OPTIONAL :: comment, el_format
  LOGICAL, INTENT(in), OPTIONAL :: local
  TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error

  LOGICAL :: failure, exists, loc
  CHARACTER(len=*), PARAMETER :: routineN='cp_2d_[nametype1]_output',&
       routineP=moduleN//':'//routineN
  CHARACTER(len=60) :: filename
  INTEGER :: handle, unitNr, lenFormat, iostat
  failure=.FALSE.; loc=.FALSE.

  CALL timeset(routineN//','//moduleN,'I',"",handle)
  IF (PRESENT(local)) loc=local
  IF (loc .OR. logger%para_env%mepos==logger%para_env%source) THEN
     IF (cp_would_output(logger, outputName , fromWhere, iter,&
          local=loc,error=error)) THEN

        CALL cp_logger_generate_filename(logger,filename,&
             TRIM(outputName)//'-'//TRIM(ADJUSTL(cp_to_string(iter))),&
             '.dat',local=loc)
        CALL cp_log(logger, cp_note_level, fromWhere, &
             "writing output to file'"//TRIM(filename)//"'") 
        INQUIRE (FILE=TRIM(filename),EXIST=exists)
        CALL cp_assert(.NOT.exists, cp_warning_level,cp_assertion_failed,&
             fromWhere=routineP,message=" overwriting file '"//filename//"'",&
             error=error)
        CALL open_file(TRIM(filename),file_status="unknown",&
             file_action="write",&
             unit_number=unitNr)

        IF (PRESENT(comment)) THEN
           WRITE(unit=unitNr,fmt='(" ",a,a)',iostat=iostat) '# ',comment
           CPInvariant(iostat==0,cp_failure_level,routineP,error,failure)
        END IF
        IF (.NOT.failure) THEN
           CALL cp_2d_[nametype1]_write(array,unit_nr=unitNr,&
                el_format=el_format,error=error)
        END IF

        CALL close_file(unitNr)
     END IF
  END IF
  CALL timestop(0.0_dp,handle)
END SUBROUTINE cp_2d_[nametype1]_output
!***************************************************************************

!!****f* cp_array_[nametype1]_utils/cp_2d_[nametype1]_write *
!!
!!   NAME
!!     cp_2d_[nametype1]_write
!!
!!   FUNCTION
!!     writes an array to the given unit
!!
!!   NOTES
!!     maybe I will move to a comma separated parentized list
!!
!!   INPUTS
!!     array: the array to write
!!     unit_nr: the unit to write to (defaults to the standard out)
!!     el_format: the format of a single element
!!     error: variable to control error logging, stopping,... 
!!            see module cp_error_handling 
!!
!!   AUTHOR
!!     Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     4.2002 created [fawzi]
!!
!!*** **********************************************************************
SUBROUTINE cp_2d_[nametype1]_write(array, unit_nr, el_format, error)
  [type1], DIMENSION(:,:), INTENT(in) :: array
  INTEGER, INTENT(in) :: unit_nr
  CHARACTER(len=*), INTENT(in), OPTIONAL :: el_format
  TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error
  
  LOGICAL :: failure
  INTEGER :: iostat, i
  CHARACTER(len=*), PARAMETER :: routineN='cp_2d_[nametype1]_write',&
        routineP=moduleN//':'//routineN
  CHARACTER(len=*), PARAMETER :: defaultFormat=[defaultFormatType1]
  CHARACTER(len=10) :: nRiga
  failure=.FALSE.
  
  nRiga=cp_to_string(SIZE(array,2))
  DO i=1,SIZE(array,1)
     IF (PRESENT(el_format)) THEN
        WRITE(unit=unit_nr,fmt='(" ",'//nRiga//el_format//')',iostat=iostat) array(i,:)
     ELSE
        WRITE(unit=unit_nr,fmt='(" ",'//nRiga//defaultFormat//')',iostat=iostat) array(i,:)
     END IF
     CPInvariant(iostat==0,cp_failure_level,routineP,error,failure)
     IF (failure) THEN
        EXIT
     END IF
  END DO
  call m_flush(unit_nr)
END SUBROUTINE cp_2d_[nametype1]_write
!***************************************************************************

!!****f* cp_array_[nametype1]_utils/cp_3d_[nametype1]_output *
!!
!!   NAME
!!     cp_3d_[nametype1]_output
!!
!!   FUNCTION
!!     writes a 3d array to an aptly named file
!!
!!   NOTES
!!     The filename is written as note to the log.
!!     At the moment outputs the comment precede by a # and then the sizes
!!     of the dimesnion and finally the whole
!!     with spaces between the entries (with the default format), and newlines
!!     after each row.
!!
!!   INPUTS
!!     logger: the logger that decides where the logging should go
!!     outputName: the name of the output, for example 'hamiltonian'
!!     fromWhere: string of the form module:function or file:lineNr
!!                that says where the error happend
!!     iter: the iteration number, or some other number that permit to 
!!           differentiate between different instances of the same object
!!     array: the array to output
!!     local: if the output is local to each task
!!     el_format: the (optional) format of a single number
!!     local: if the output is local to this task (defaults to false)
!!     error: variable to control error logging, stopping,... 
!!            see module cp_error_handling 
!!
!!   AUTHOR
!!     @author Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     05.2003 created [fawzi]
!!
!!*** **********************************************************************
SUBROUTINE cp_3d_[nametype1]_output(logger, outputName, &
     fromWhere, iter, array,&
     comment, local, el_format, error)
  TYPE(cp_logger_type), POINTER ::logger
  CHARACTER(len=*) , INTENT(in) :: outputName
  CHARACTER(len=*), INTENT(in):: fromWhere
  INTEGER, INTENT(in) :: iter
  [type1], INTENT(in), DIMENSION(:,:,:) :: array
  CHARACTER(len=*), INTENT(in),OPTIONAL :: comment, el_format
  LOGICAL, INTENT(in), OPTIONAL :: local
  TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error

  LOGICAL :: failure, exists, loc
  CHARACTER(len=*), PARAMETER :: routineN='cp_3d_[nametype1]_output',&
       routineP=moduleN//':'//routineN
  CHARACTER(len=60) :: filename
  INTEGER :: handle, unitNr, lenFormat, iostat
  failure=.FALSE.; loc=.FALSE.

  CALL timeset(routineN//','//moduleN,'I',"",handle)
  IF (PRESENT(local)) loc=local
  IF (loc .OR. logger%para_env%mepos==logger%para_env%source) THEN
     IF (cp_would_output(logger, outputName , fromWhere, iter,&
          local=loc,error=error)) THEN

        CALL cp_logger_generate_filename(logger,filename,&
             TRIM(outputName)//'-'//TRIM(ADJUSTL(cp_to_string(iter))),&
             '.dat',local=loc)
        CALL cp_log(logger, cp_note_level, fromWhere, &
             "writing output to file'"//TRIM(filename)//"'") 
        INQUIRE (FILE=TRIM(filename),EXIST=exists)
        CALL cp_assert(.NOT.exists, cp_warning_level,cp_assertion_failed,&
             fromWhere=routineP,message=" overwriting file '"//filename//"'",&
             error=error)
        CALL open_file(TRIM(filename),file_status="unknown",&
             file_action="write",&
             unit_number=unitNr)

        IF (PRESENT(comment)) THEN
           WRITE(unit=unitNr,fmt='(" ",a,a)',iostat=iostat) '# ',comment
           CPInvariant(iostat==0,cp_failure_level,routineP,error,failure)
        END IF
        IF (.NOT.failure) THEN
           CALL cp_3d_[nametype1]_write(array,unit_nr=unitNr,&
                el_format=el_format,error=error)
        END IF

        CALL close_file(unitNr)
     END IF
  END IF
  CALL timestop(0.0_dp,handle)
END SUBROUTINE cp_3d_[nametype1]_output
!***************************************************************************

!!****f* cp_array_[nametype1]_utils/cp_3d_[nametype1]_write *
!!
!!   NAME
!!     cp_3d_[nametype1]_write
!!
!!   FUNCTION
!!     writes an array to the given unit
!!
!!   NOTES
!!     maybe I will move to a comma separated parentized list
!!     the order of the elements is different from 2d
!!
!!   INPUTS
!!     array: the array to write
!!     unit_nr: the unit to write to (defaults to the standard out)
!!     el_format: the format of a single element
!!     error: variable to control error logging, stopping,... 
!!            see module cp_error_handling 
!!
!!   AUTHOR
!!     Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     05.2003 created [fawzi]
!!
!!*** **********************************************************************
SUBROUTINE cp_3d_[nametype1]_write(array, unit_nr, el_format, error)
  [type1], DIMENSION(:,:,:), INTENT(in) :: array
  INTEGER, INTENT(in) :: unit_nr
  CHARACTER(len=*), INTENT(in), OPTIONAL :: el_format
  TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error
  
  LOGICAL :: failure
  INTEGER :: iostat, j, k
  CHARACTER(len=*), PARAMETER :: routineN='cp_3d_[nametype1]_write',&
        routineP=moduleN//':'//routineN
  CHARACTER(len=*), PARAMETER :: defaultFormat=[defaultFormatType1]
  CHARACTER(len=10) :: nRiga
  failure=.FALSE.
  
  WRITE(unit=unit_nr,fmt='(i10," ",i10," ",i10,/)',iostat=iostat) &
       SIZE(array,1),SIZE(array,2), SIZE(array,3)
  CPInvariant(iostat==0,cp_failure_level,routineP,error,failure)

  nRiga=cp_to_string(SIZE(array,1))
  DO k=1,SIZE(array,3)
     DO j=1,SIZE(array,2)
        IF (PRESENT(el_format)) THEN
           WRITE(unit=unit_nr,fmt='(" ",'//nRiga//el_format//')',&
                iostat=iostat) array(:,j,k)
        ELSE
           WRITE(unit=unit_nr,fmt='(" ",'//nRiga//defaultFormat//')',&
                iostat=iostat) array(:,j,k)
        END IF
        CPInvariant(iostat==0,cp_failure_level,routineP,error,failure)
        IF (failure) THEN
           EXIT
        END IF
     END DO
     WRITE(unit=unit_nr,fmt='()',iostat=iostat)
     CPInvariant(iostat==0,cp_failure_level,routineP,error,failure)
  END DO
END SUBROUTINE cp_3d_[nametype1]_write
!***************************************************************************

!!****f* cp_array_[nametype1]_utils/cp_1d_[nametype1]_guarantee_size [1.0] *
!!
!!   NAME
!!     cp_1d_[nametype1]_guarantee_size
!!
!!   FUNCTION
!!     If the size of the array is changes reallocate it.
!!     Issues a warning when the size changes (but not on allocation
!!     and deallocation).
!!     
!!     The data is NOT preserved (if you want to preserve the data see
!!     the realloc in the module memory_utilities)
!!
!!   NOTES
!!     this is a different behaviour than the realloc in the module
!!     memory_utilities. It is quite low level
!!
!!   INPUTS
!!     array: the array to reallocate if necessary
!!     n: the wanted size
!!     init: the initial value of the elements when resized
!!     error: variable to control error logging, stopping,... 
!!            see module cp_error_handling 
!!
!!   AUTHOR
!!     @author Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     12.2001 first version [fawzi]
!!     3.2002 templatized [fawzi]
!!
!!*** **********************************************************************
  SUBROUTINE cp_1d_[nametype1]_guarantee_size(array, n, init, error)
    [type1], DIMENSION(:), POINTER :: array
    INTEGER, INTENT(in) :: n
    [type1], INTENT(in), OPTIONAL :: init
    TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error

    LOGICAL :: failure
    INTEGER :: stat
    CHARACTER(len=*), PARAMETER :: routineN='cp_1d_[nametype1]_guarantee_size',&
         routineP=moduleN//':'//routineN
    failure=.FALSE.

    CPPrecondition(n>=0,cp_failure_level,routineP,error,failure)
    failureIf: IF (.NOT. failure) THEN
       IF (ASSOCIATED(array)) THEN
          IF (SIZE(array) /= n) THEN
             CPErrorMessage(cp_warning_level,routineP,'size has changed',error)
             DEALLOCATE(array, stat=stat)
             CPPostcondition(stat==0,cp_warning_level,routineP,error,failure)
          END IF
       END IF
       IF (.NOT.ASSOCIATED(array)) THEN
          ALLOCATE(array(n), stat=stat)
          CPPostcondition(stat==0, cp_failure_level,routineP,error,failure)
          IF (PRESENT(init).AND..NOT.failure) array=init
       END IF
    END IF failureIf
  END SUBROUTINE cp_1d_[nametype1]_guarantee_size
!***************************************************************************

!!****f* cp_array_[nametype1]_utils/cp_2d_[nametype1]_guarantee_size [1.0] *
!!
!!   NAME
!!     cp_2d_[nametype1]_guarantee_size
!!
!!   FUNCTION
!!     If the size of the array is changes reallocate it.
!!     Issues a warning when the size changes (but not on allocation
!!     and deallocation).
!!     
!!     The data is NOT preserved (if you want to preserve the data see
!!     the realloc in the module memory_utilities)
!!
!!   NOTES
!!     this is a different behaviour than the realloc in the module
!!     memory_utilities. It is quite low level
!!
!!   INPUTS
!!     - array: the array to reallocate if necessary
!!     - n_rows: the wanted number of rows
!!     - n_cols: the wanted number of cols
!!     - init: the initial value of the elements when resized
!!     - error: variable to control error logging, stopping,... 
!!       see module cp_error_handling 
!!
!!   AUTHOR
!!     Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     5.2001 first version [fawzi]
!!
!!*** **********************************************************************
  SUBROUTINE cp_2d_[nametype1]_guarantee_size(array, n_rows, n_cols ,&
       init, error)
    [type1], DIMENSION(:,:), POINTER :: array
    INTEGER, INTENT(in) :: n_rows, n_cols
    [type1], INTENT(in), OPTIONAL :: init
    TYPE(cp_error_type), OPTIONAL, INTENT(inout) :: error

    LOGICAL :: failure
    INTEGER :: stat
    CHARACTER(len=*), PARAMETER :: routineN='cp_2d_[nametype1]_guarantee_size',&
         routineP=moduleN//':'//routineN
    failure=.FALSE.

    CPPrecondition(n_cols>=0,cp_failure_level,routineP,error,failure)
    CPPrecondition(n_rows>=0,cp_failure_level,routineP,error,failure)
    failureIf: IF (.NOT. failure) THEN
       IF (ASSOCIATED(array)) THEN
          IF (SIZE(array,1) /= n_rows .OR. SIZE(array,2) /= n_cols) THEN
             CPErrorMessage(cp_warning_level,routineP,'size has changed',error)
             DEALLOCATE(array, stat=stat)
             CPPostconditionNoFail(stat==0,cp_warning_level,routineP,error)
             NULLIFY(array)
          END IF
       END IF
       IF (.NOT.ASSOCIATED(array)) THEN
          ALLOCATE(array(n_rows,n_cols), stat=stat)
          CPPostconditionNoFail(stat==0, cp_failure_level,routineP,error)
          IF (PRESENT(init).AND..NOT.failure) array=init
       END IF
    END IF failureIf
  END SUBROUTINE cp_2d_[nametype1]_guarantee_size
!***************************************************************************

!!****f* cp_array_[nametype1]_utils/cp_1d_[nametype1]_bsearch [1.0] *
!!
!!   NAME
!!     cp_1d_[nametype1]_bsearch
!!
!!   FUNCTION
!!     returns the index at which the element el should be inserted in the
!!     array to keep it ordered (array(i)>=el).
!!     If the element is bigger than all the elements in the array returns
!!     the last index+1.
!!
!!   NOTES
!!     the array should be ordered in growing order
!!
!!   INPUTS
!!     - array: the array to search
!!     - el: the element to look for
!!     - l_index: the lower index for binary search (defaults to 1)
!!     - u_index: the upper index for binary search (defaults to size(array))
!!     - error: variable to control error logging, stopping,... 
!!       see module cp_error_handling 
!!
!!   AUTHOR
!!     Fawzi Mohamed
!!
!!   MODIFICATION HISTORY
!!     06.2003 created [fawzi]
!!
!!*** **********************************************************************
FUNCTION cp_1d_[nametype1]_bsearch(array, el, l_index, u_index, error)&
     result(res)
  [type1], DIMENSION(:), intent(in) :: array
  [type1], intent(in) :: el
  INTEGER, INTENT(in), OPTIONAL :: l_index, u_index
  type(cp_error_type), optional, intent(inout) :: error
  integer :: res
  
  logical :: failure
  character(len=*), parameter :: routineN='cp_1d_[nametype1]_bsearch',&
        routineP=moduleN//':'//routineN
  INTEGER :: lindex,uindex,aindex
  failure=.false.
  
  lindex=1
  uindex=size(array)
  if (present(l_index)) lindex=l_index
  if (present(u_index)) uindex=u_index
  DO WHILE (lindex <= uindex)
     aindex=(lindex+uindex)/2
     IF ([lessQ](array(aindex),el)) THEN
        lindex=aindex+1
     ELSE
        uindex=aindex-1
     END IF
  END DO
  res=lindex
END FUNCTION cp_1d_[nametype1]_bsearch
!***************************************************************************

  ! template def put here so that line numbers in template and derived 
  ! files are almost the same (multi-line use change it a bit)
  ! [template(type1,nametype1,USE,defaultFormatType1,lessQ,defines)]

END MODULE cp_array_[nametype1]_utils
