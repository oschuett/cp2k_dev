[
{
 'nametype1':'int',
 'type1':'integer',
 'type1in':'integer, intent(in)',
 'type1out':'integer, intent(out)',
 'USE':'USE cp_array_i_utils, ONLY: cp_i_write',
 'defines':
"""#define CP_SLL_I_LESS_Q(el1,el2) ( el1 < el2 )
#define CP_SLL_I_EQUAL_Q(el1,el2) ( el1 == el2 )
""",
 '=':'=',
 'type1arrayEl':'integer',
 'array=':'=',
 'arrayEl':'',
 'lessQ':'CP_SLL_I_LESS_Q',
 'equalQ':'CP_SLL_I_EQUAL_Q',
 'write_el':'cp_i_write'
},

{
 'nametype1':'int_ptr', 
 'type1':'integer, pointer', 
 'type1in':'integer, intent(in),target',
 'type1out':'integer, pointer',
 'USE':'USE cp_array_i_utils, ONLY: cp_i_write',
 'defines':
"""#define CP_SLL_I_LESS_Q(el1,el2) ( el1 < el2 )
#define CP_SLL_I_EQUAL_Q(el1,el2) ( el1 == el2 )
#define PW_WRITE_UNIMPLEMENTED(el, unit, err)
""",
 '=':'=>',
 'type1arrayEl':'integer',
 'array=':'=',
 'arrayEl':'',
 'lessQ':'CP_SLL_I_LESS_Q',
 'equalQ':'CP_SLL_I_EQUAL_Q',
 'write_el':'cp_i_write' # careful:no check for unassociated pointers!
}
,
{
 'nametype1':'pw', 
 'type1':'type(pw_type),pointer', 
 'type1in':'type(pw_type), target',
 'type1out':'type(pw_type), pointer',
 'USE':'USE pw_types, ONLY: pw_type, pw_p_type, pw_write',
 'defines':
"""! less not much meaningful...
#define CP_SLL_PW_LESS_Q(el1,el2) ( el1 %id_nr < el2 %id_nr )
#define CP_SLL_PW_EQUAL_Q(el1,el2) ( el1 %id_nr == el2 %id_nr )
""",
 '=':'=>',
 'type1arrayEl':'type(pw_p_type)',
 'array=':'=>',
 'arrayEl':'%pw',
 'lessQ':'CP_SLL_PW_LESS_Q',
 'equalQ':'CP_SLL_PW_EQUAL_Q',
 'write_el':'pw_write'
}
,
{
 'nametype1':'fm', 
 'type1':'type(cp_full_matrix_type),pointer', 
 'type1in':'type(cp_full_matrix_type), target',
 'type1out':'type(cp_full_matrix_type), pointer',
 'USE':
"""USE cp_fm_types, ONLY: cp_full_matrix_type, cp_full_matrix_p_type,&
        cp_fm_write""",
 'defines':
"""! less not much meningful...
#define CP_SLL_FM_LESS_Q(el1,el2) ( el1 %id_nr < el2 %id_nr )
#define CP_SLL_FM_EQUAL_Q(el1,el2) ( el1 %id_nr == el2 %id_nr )
""",
 '=':'=>',
 'type1arrayEl':'type(cp_full_matrix_p_type)',
 'array=':'=>',
 'arrayEl':'%matrix',
 'lessQ':'CP_SLL_FM_LESS_Q',
 'equalQ':'CP_SLL_FM_EQUAL_Q',
 'write_el':'cp_fm_write'
}
,
{
 'nametype1':'sm', 
 'type1':'type(real_matrix_type),pointer', 
 'type1in':'type(real_matrix_type), target',
 'type1out':'type(real_matrix_type), pointer',
 'USE':
"""USE sparse_matrix_types, ONLY: real_matrix_type, real_matrix_p_type,&
     cp_sm_get_id_nr
USE cp_matrix_utils, ONLY: cp_sm_write""",
 'defines':
"""! less not much meningful...
#define CP_SLL_SM_LESS_Q(el1,el2) ( cp_sm_get_id_nr(el1) < cp_sm_get_id_nr(el2) )
#define CP_SLL_SM_EQUAL_Q(el1,el2) ( cp_sm_get_id_nr(el1) == cp_sm_get_id_nr(el2) )
""",
 '=':'=>',
 'type1arrayEl':'type(real_matrix_p_type)',
 'array=':'=>',
 'arrayEl':'%matrix',
 'lessQ':'CP_SLL_SM_LESS_Q',
 'equalQ':'CP_SLL_SM_EQUAL_Q',
 'write_el':'cp_sm_write'
}
]