[
{
 'nametype1':'int',
 'type1':'integer',
 'type1in':'integer, intent(in)',
 'type1out':'integer, intent(out)',
 'USE':'USE cp_array_i_utils, ONLY: cp_i_write',
 'defines':
"""#define CP_SLL_I_LESS_Q(el1,el2) ( el1 < el2 )
#define CP_SLL_I_EQUAL_Q(el1,el2) ( el1 == el2 )
""",
 '=':'=',
 'type1arrayEl':'integer',
 'array=':'=',
 'arrayEl':'',
 'lessQ':'CP_SLL_I_LESS_Q',
 'equalQ':'CP_SLL_I_EQUAL_Q',
 'write_el':'cp_i_write',
 'private_routines':''
},

{
 'nametype1':'int_ptr', 
 'type1':'integer, pointer', 
 'type1in':'integer, intent(in),target',
 'type1out':'integer, pointer',
 'USE':'USE cp_array_i_utils, ONLY: cp_i_write',
 'defines':
"""#define CP_SLL_I_LESS_Q(el1,el2) ( el1 < el2 )
#define CP_SLL_I_EQUAL_Q(el1,el2) ( el1 == el2 )
#define PW_WRITE_UNIMPLEMENTED(el, unit, err)
""",
 '=':'=>',
 'type1arrayEl':'integer',
 'array=':'=',
 'arrayEl':'',
 'lessQ':'CP_SLL_I_LESS_Q',
 'equalQ':'CP_SLL_I_EQUAL_Q',
 'write_el':'cp_i_write', # careful:no check for unassociated pointers!
 'private_routines':''
}
,
{
 'nametype1':'pw', 
 'type1':'type(pw_type),pointer', 
 'type1in':'type(pw_type), pointer',
 'type1out':'type(pw_type), pointer',
 'USE':'USE pw_types, ONLY: pw_type, pw_p_type, pw_write',
 'defines':
"""! less not much meaningful...
#define CP_SLL_PW_LESS_Q(el1,el2) ( el1 %id_nr < el2 %id_nr )
#define CP_SLL_PW_EQUAL_Q(el1,el2) ( el1 %id_nr == el2 %id_nr )
""",
 '=':'=>',
 'type1arrayEl':'type(pw_p_type)',
 'array=':'=>',
 'arrayEl':'%pw',
 'lessQ':'CP_SLL_PW_LESS_Q',
 'equalQ':'CP_SLL_PW_EQUAL_Q',
 'write_el':'pw_write',
 'private_routines':''
}
,
{
 'nametype1':'fm', 
 'type1':'type(cp_fm_type),pointer', 
 'type1in':'type(cp_fm_type), pointer',
 'type1out':'type(cp_fm_type), pointer',
 'USE':
"""USE cp_fm_types, ONLY: cp_fm_type, cp_fm_p_type,&
        cp_fm_write""",
 'defines':
"""! less not much meningful...
#define CP_SLL_FM_LESS_Q(el1,el2) ( el1 %id_nr < el2 %id_nr )
#define CP_SLL_FM_EQUAL_Q(el1,el2) ( el1 %id_nr == el2 %id_nr )
""",
 '=':'=>',
 'type1arrayEl':'type(cp_fm_p_type)',
 'array=':'=>',
 'arrayEl':'%matrix',
 'lessQ':'CP_SLL_FM_LESS_Q',
 'equalQ':'CP_SLL_FM_EQUAL_Q',
 'write_el':'cp_fm_write',
 'private_routines':''
}
,
{
 'nametype1':'sm', 
 'type1':'type(real_matrix_type),pointer', 
 'type1in':'type(real_matrix_type), pointer',
 'type1out':'type(real_matrix_type), pointer',
 'USE':
"""USE sparse_matrix_types, ONLY: real_matrix_type, real_matrix_p_type,&
     cp_sm_get_id_nr
USE cp_matrix_utils, ONLY: cp_sm_write""",
 'defines':
"""! less not much meningful...
#define CP_SLL_SM_LESS_Q(el1,el2) ( cp_sm_get_id_nr(el1) < cp_sm_get_id_nr(el2) )
#define CP_SLL_SM_EQUAL_Q(el1,el2) ( cp_sm_get_id_nr(el1) == cp_sm_get_id_nr(el2) )
""",
 '=':'=>',
 'type1arrayEl':'type(real_matrix_p_type)',
 'array=':'=>',
 'arrayEl':'%matrix',
 'lessQ':'CP_SLL_SM_LESS_Q',
 'equalQ':'CP_SLL_SM_EQUAL_Q',
 'write_el':'cp_sm_write',
 'private_routines':''
}
,
{
 'nametype1':'rs', 
 'type1':'type(realspace_grid_type),pointer', 
 'type1in':'type(realspace_grid_type), pointer',
 'type1out':'type(realspace_grid_type), pointer',
 'USE':
"""USE realspace_grid_types, ONLY: realspace_grid_type, realspace_grid_p_type,&
    rs_grid_write""",
 'defines':
"""! less not much meningful...
#define CP_SLL_RS_LESS_Q(el1,el2) ( el1%id_nr < el2%id_nr )
#define CP_SLL_RS_EQUAL_Q(el1,el2) ( el1%id_nr == el2%id_nr )
""",
 '=':'=>',
 'type1arrayEl':'type(realspace_grid_p_type)',
 'array=':'=>',
 'arrayEl':'%rs_grid',
 'lessQ':'CP_SLL_RS_LESS_Q',
 'equalQ':'CP_SLL_RS_EQUAL_Q',
 'write_el':'rs_grid_write',
 'private_routines':''
},
{
 'nametype1':'3d_r', 
 'type1':'real(kind=dp),dimension(:,:,:),pointer', 
 'type1in':'real(kind=dp),dimension(:,:,:), pointer',
 'type1out':'real(kind=dp),dimension(:,:,:), pointer',
 'USE':
"""USE kinds, only: dp
USE cp_array_r_utils, only: cp_3d_r_p_type, cp_3d_r_write""",
 'defines':
"""! less not much meningful... and defines oly a partial ordering.
#define CP_SLL_R_LESS_Q(el1,el2) ( all(el1 < el2) )
#define CP_SLL_R_EQUAL_Q(el1,el2) ( all(el1 == el2) )
""",
 '=':'=>',
 'type1arrayEl':'type(cp_3d_r_p_type)',
 'array=':'=>',
 'arrayEl':'%array',
 'lessQ':'CP_SLL_R_LESS_Q',
 'equalQ':'CP_SLL_R_EQUAL_Q',
 'write_el':'cp_3d_r_write',
 'private_routines':''
},
{
 'nametype1':'xc_deriv', 
 'type1':'type(xc_derivative_type),pointer', 
 'type1in':'type(xc_derivative_type),pointer',
 'type1out':'type(xc_derivative_type),pointer',
 'USE':
"""USE xc_derivative_types, only: xc_derivative_type,xc_derivative_p_type,xc_derivative_write""",
 'defines':
"""#define CP_SLL_DERIV_LESS_Q(el1,el2) cp_sll_deriv_less_q(el1,el2,error)
#define CP_SLL_DERIV_EQUAL_Q(el1,el2) ( el1%desc == el2%desc )
""",
 '=':'=>',
 'type1arrayEl':'type(xc_derivative_p_type)',
 'array=':'=>',
 'arrayEl':'%deriv',
 'lessQ':'cp_sll_deriv_less_q',
 'equalQ':'CP_SLL_DERIV_EQUAL_Q',
 'write_el':'xc_derivative_write',
 'private_routines':"""!private compare function
function cp_sll_deriv_less_q(el1,el2,error) result(res)
  type(xc_derivative_type), pointer :: el1,el2
  type(cp_error_type), intent(inout), optional :: error
  logical :: res

  character(len=*),parameter :: routineN='cp_sll_deriv_less_q',&
      routineP=moduleN//':'//routineN

  CPPreconditionNoFail(associated(el1),cp_failure_level,routineP,error)
  CPPreconditionNoFail(associated(el1%split_desc),cp_failure_level,routineP,error)
  CPPreconditionNoFail(associated(el2),cp_failure_level,routineP,error)
  CPPreconditionNoFail(associated(el2%split_desc),cp_failure_level,routineP,error)
  res=size(el1%split_desc)<size(el2%split_desc).or.&
      (size(el1%split_desc)==size(el2%split_desc).and.el1%desc<el2%desc)
end function
"""
}]
