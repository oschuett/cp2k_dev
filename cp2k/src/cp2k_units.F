!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000,2004  CP2K developers group                            !
!-----------------------------------------------------------------------------!


!!****** cp2k/cp2k_units [1.0] *
!!
!!   NAME
!!     cp2k_units
!!
!!   FUNCTION
!!
!!   AUTHOR
!!     CJM
!!
!!   MODIFICATION HISTORY
!!     none
!!
!!   SOURCE
!******************************************************************************

MODULE cp2k_units
  USE kinds,                           ONLY: dp
  USE mathconstants,                   ONLY: twopi
  USE physcon,                         ONLY: &
       a_bohr, bohr, boltzmann, e_charge, evolt, femtoseconds, h_bar, hz, &
       joule, kcalmol, kjmol, massunit, permittivity, wavenum
#include "cp_common_uses.h"

  IMPLICIT NONE
  PRIVATE

  TYPE unit_convert_type
 !   PRIVATE  later
     REAL (KIND=dp) :: mass, &
                       fs, &
                       kcal, &
                       kj, &
                       kelvin, &
                       degree, &
                       bar, &
                       wavenum, &
                       nm, &
                       angstrom, &
                       bohr, &
                       eps0, &
                       ev
     CHARACTER ( LEN = 10 ) :: e_label, l_label, vol_label,  &
                               temp_label, pres_label,       &
                               angl_label
  END TYPE unit_convert_type
  
  TYPE ( unit_convert_type ), POINTER :: units
  PUBLIC :: unit_convert_type, get_cp2k_units, init_cp2k_units, rm_cp2k_units
  CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'cp2k_units'
!!*****
!******************************************************************************

CONTAINS

!******************************************************************************
!!****** cp2k_units/init_cp2k_units [1.0] *
!!
!!   NAME
!!     init_cp2k_units
!!
!!   FUNCTION
!!     routine which defines internal units and conversion factors
!!     internal units of CP2K are in atomic_units
!!
!!   AUTHOR
!!     CJM
!!
!!   MODIFICATION HISTORY
!!     none
!!
!!   SOURCE
!******************************************************************************

SUBROUTINE init_cp2k_units (error)

    TYPE(cp_error_type), INTENT(inout)  &
                                             :: error

    CHARACTER(len=*), PARAMETER :: routineN = 'init_cp2k_units', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: stat
    LOGICAL                                  :: failure

  failure=.FALSE.

  ALLOCATE(units, stat=stat)
  CPPrecondition(stat==0,cp_failure_level,routineP,error,failure)
  units % temp_label = '[K]'
  units % pres_label = '[bar]'
  units % angl_label = '[deg]'
  units % l_label = '[bohr]'
  units % vol_label = '[bohr^3]'
  units % e_label = '[hartree]'

! amu to mass AU
  units % mass = massunit
! fs to time AU
  units % fs = 1.0_dp/femtoseconds
! 1/cm to time AU
  units % wavenum =  joule * wavenum / hz / h_bar
! kjoule/mole to energy AU
  units % kj = 1.0_dp / kjmol
! kcal/mole to energy AU
  units % kcal = 1.0_dp / kcalmol
! EV to energy AU
  units % ev = 1.0_dp / evolt
! kelvin to energy AU
  units % kelvin = boltzmann / joule
! nm to length AU
  units % nm = 10.0_dp * bohr
! angstrom to length AU
  units % angstrom = bohr
! length AU to angstrom
  units % bohr = 1.0 / bohr
! degrees to radians
  units % degree = twopi / 360.0_dp
! bar to pressure AU
  units % bar = joule / ( a_bohr ** 3 * 1.0E+05_dp )
! permittivity to AU
  units % eps0 = permittivity * joule * a_bohr / e_charge ** 2

END SUBROUTINE init_cp2k_units

SUBROUTINE rm_cp2k_units (error)

    TYPE(cp_error_type), INTENT(inout)  &
                                             :: error

    CHARACTER(len=*), PARAMETER :: routineN = 'rm_cp2k_units', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: stat
    LOGICAL                                  :: failure

  failure=.FALSE.

  DEALLOCATE(units, stat=stat)
  CPPrecondition(stat==0,cp_failure_level,routineP,error,failure)

END SUBROUTINE rm_cp2k_units




!******************************************************************************
!!****** cp2k_units/get_cp2k_units [1.0] *
!!
!!   NAME
!!     get_cp2k_units
!!
!!   FUNCTION
!!     routine which defines internal units and conversion factors
!!     internal units of CP2K are in atomic_units
!!
!!   AUTHOR
!!     CJM
!!
!!   MODIFICATION HISTORY
!!     none
!!
!!   SOURCE
!******************************************************************************

SUBROUTINE get_cp2k_units ( unit_struc )

    TYPE(unit_convert_type), POINTER         :: unit_struc

    unit_struc => units

END SUBROUTINE get_cp2k_units


END MODULE cp2k_units

!******************************************************************************
