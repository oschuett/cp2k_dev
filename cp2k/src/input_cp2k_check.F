!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000 - 2006  CP2K developers group                          !
!-----------------------------------------------------------------------------!

!!****h* cp2k/input_cp2k_check *
!!
!!   NAME
!!     input_cp2k_check
!!
!!   FUNCTION
!!     checks the input and perform some automatic "magic" on it
!!
!!   NOTES
!!     -
!!
!!   AUTHOR
!!     fawzi
!!
!!   MODIFICATION HISTORY
!!     01.2006 created [fawzi]
!!
!!   SOURCE
!****************************************************************************
MODULE input_cp2k_check
  USE cp_para_types,                   ONLY: cp_para_env_type
  USE cp_parser,                       ONLY: cp_parser_type,&
                                             parser_create,&
                                             parser_release
  USE cp_units,                        ONLY: cp_unit_set_create,&
                                             cp_unit_set_release,&
                                             cp_unit_set_type
  USE input_constants,                 ONLY: xc_funct_blyp,&
                                             xc_funct_bp,&
                                             xc_funct_hcth120,&
                                             xc_funct_no_shortcut,&
                                             xc_funct_olyp,&
                                             xc_funct_pade,&
                                             xc_funct_pbe,&
                                             xc_funct_tpss
  USE input_cp2k,                      ONLY: create_cp2k_root_section
  USE input_parsing,                   ONLY: section_vals_parse
  USE input_section_types,             ONLY: &
       section_release, section_type, section_vals_create, section_vals_get, &
       section_vals_get_subs_vals, section_vals_get_subs_vals3, &
       section_vals_release, section_vals_set_subs_vals, section_vals_type, &
       section_vals_val_get, section_vals_val_set
  USE kinds,                           ONLY: default_path_length,&
                                             default_string_length,&
                                             dp
  USE timings,                         ONLY: timeset,&
                                             timestop
#include "cp_common_uses.h"

  IMPLICIT NONE
  PRIVATE

  LOGICAL, PRIVATE, PARAMETER :: debug_this_module=.TRUE.
  CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'input_cp2k_check'

  PUBLIC :: check_cp2k_input, xc_functionals_expand

!!***
!****************************************************************************
CONTAINS


!!****f* input_cp2k/check_cp2k_input *
!!
!!   NAME
!!     check_cp2k_input
!!
!!   FUNCTION
!!     performs further checks on an input that parsed successfully
!!
!!   NOTES
!!     at the moment does nothing
!!
!!   ARGUMENTS
!!     - input_file: the parsed input
!!     - error: variable to control error logging, stopping,... 
!!       see module cp_error_handling 
!!
!!   AUTHOR
!!     fawzi
!!
!!*** **********************************************************************
  SUBROUTINE check_cp2k_input(input_file,para_env,error)
    TYPE(section_vals_type), POINTER         :: input_file
    TYPE(cp_para_env_type), POINTER          :: para_env
    TYPE(cp_error_type), INTENT(inout)  &
                                             :: error

    CHARACTER(len=*), PARAMETER :: routineN = 'check_cp2k_input', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: handle, iforce_eval, &
                                                nforce_eval
    LOGICAL                                  :: explicit, failure
    TYPE(section_vals_type), POINTER         :: section, section2, sections

    CALL timeset(routineN,handle)

    failure=.FALSE.

    CPPrecondition(ASSOCIATED(input_file),cp_failure_level,routineP,error,failure)
    IF (.NOT.failure) THEN
       CPPrecondition(input_file%ref_count>0,cp_failure_level,routineP,error,failure)
    END IF
    IF (.NOT. failure) THEN
       ! ext_restart
       CALL handle_ext_restart(input_file,para_env,error)

       ! checks on force_eval section
       sections => section_vals_get_subs_vals(input_file,"FORCE_EVAL",error=error)
       CALL section_vals_get(sections, n_repetition=nforce_eval, error=error)
       ! multiple force_eval only if present RESPA
       section2 => section_vals_get_subs_vals(input_file,&
            "MOTION%MD%RESPA",error=error)
       CALL section_vals_get(section2,explicit=explicit,error=error)
       IF ((explicit.AND.(nforce_eval==1)).OR.(.NOT.explicit.AND.(nforce_eval>1))) THEN
           CALL cp_assert(.FALSE.,cp_failure_level,cp_assertion_failed,&
                routineP,"Error multiple force_env without RESPA or RESPA with one single "//&
                " force_env section.",error,failure)
       END IF
       DO iforce_eval = 1,nforce_eval
          section => section_vals_get_subs_vals3(sections,"DFT",&
                i_rep_section=iforce_eval,error=error)
          ! xc: expand and fix default for tddfpt
          section2 => section_vals_get_subs_vals(section,"XC%XC_FUNCTIONAL",error=error)
          CALL xc_functionals_expand(section2,error=error)
          section2 => section_vals_get_subs_vals(section,"TDDFPT%XC%XC_FUNCTIONAL",error=error)
          CALL section_vals_get(section2,explicit=explicit,error=error)
          IF (explicit) THEN
             CALL xc_functionals_expand(section2,error=error)
          ELSE
             section2 => section_vals_get_subs_vals(section,&
                  "XC%XC_FUNCTIONAL",error=error)
             CALL section_vals_set_subs_vals(section,&
                  "TDDFPT%XC%XC_FUNCTIONAL",&
                  section2,error=error)
          END IF
       END DO
    END IF
    CALL timestop(handle)
  END SUBROUTINE check_cp2k_input
!***************************************************************************

!!****f* input_cp2k_check/xc_functionals_expand *
!!
!!   NAME
!!     xc_functionals_expand
!!
!!   FUNCTION
!!     expand a shortcutted functional section
!!
!!   NOTES
!!     -
!!
!!   INPUTS
!!     - functionals: the functional section to expand
!!     - error: variable to control error logging, stopping,... 
!!       see module cp_error_handling 
!!
!!   AUTHOR
!!     fawzi
!!
!!*** **********************************************************************
SUBROUTINE xc_functionals_expand(functionals,error)
    TYPE(section_vals_type), POINTER         :: functionals
    TYPE(cp_error_type), INTENT(inout)  &
                                             :: error

    CHARACTER(len=*), PARAMETER :: routineN = 'xc_functionals_expand', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: shortcut
    LOGICAL                                  :: failure

  failure=.FALSE.
  
  IF (.NOT. failure) THEN
     CALL section_vals_val_get(functionals,"_SECTION_PARAMETERS_",&
          i_val=shortcut,error=error)
     SELECT CASE(shortcut)
     CASE(xc_funct_no_shortcut)
        ! nothing to expand
     CASE(xc_funct_blyp)
        CALL section_vals_val_set(functionals,"BECKE88%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"LYP%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"_SECTION_PARAMETERS_",&
             i_val=xc_funct_no_shortcut,error=error)
     CASE(xc_funct_bp)
        CALL section_vals_val_set(functionals,"BECKE88%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"P86C%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"_SECTION_PARAMETERS_",&
             i_val=xc_funct_no_shortcut,error=error)
     CASE(xc_funct_pade)
        CALL section_vals_val_set(functionals,"PADE%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"_SECTION_PARAMETERS_",&
             i_val=xc_funct_no_shortcut,error=error)
     CASE(xc_funct_pbe)
        CALL section_vals_val_set(functionals,"PBE%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"_SECTION_PARAMETERS_",&
             i_val=xc_funct_no_shortcut,error=error)
     CASE(xc_funct_tpss)
        CALL section_vals_val_set(functionals,"TPSS%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"_SECTION_PARAMETERS_",&
             i_val=xc_funct_no_shortcut,error=error)
     CASE(xc_funct_olyp)
        CALL section_vals_val_set(functionals,"OPTX%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"LYP%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"_SECTION_PARAMETERS_",&
             i_val=xc_funct_no_shortcut,error=error)
     CASE(xc_funct_hcth120)
        CALL section_vals_val_set(functionals,"HCTH%_SECTION_PARAMETERS_",&
             l_val=.TRUE.,error=error)
        CALL section_vals_val_set(functionals,"HCTH%PARAMETER_SET",&
             i_val=120,error=error)
        CALL section_vals_val_set(functionals,"_SECTION_PARAMETERS_",&
             i_val=xc_funct_no_shortcut,error=error)
        
     CASE default
        CALL cp_assert(.FALSE.,cp_failure_level,cp_assertion_failed,&
             routineP,"unknown shortcut "//TRIM(ADJUSTL(cp_to_string(shortcut))),&
             error,failure)
     END SELECT
  END IF
END SUBROUTINE xc_functionals_expand
!***************************************************************************

!!****f* input_cp2k_check/handle_ext_restart *
!!
!!   NAME
!!     handle_ext_restart
!!
!!   FUNCTION
!!     Replaces the requested sections in the input with those found
!!     in the external restart (EXT_RESTART%RESTART_FILE_NAME).
!!
!!   NOTES
!!     -
!!
!!   ARGUMENTS
!!     - input_file: the input file to initialize
!!     - error: variable to control error logging, stopping,... 
!!       see module cp_error_handling 
!!
!!   AUTHOR
!!     fawzi
!!
!!*** **********************************************************************
SUBROUTINE handle_ext_restart(input_file,para_env,error)
    TYPE(section_vals_type), POINTER         :: input_file
    TYPE(cp_para_env_type), POINTER          :: para_env
    TYPE(cp_error_type), INTENT(inout)  &
                                             :: error

    CHARACTER(len=*), PARAMETER :: routineN = 'handle_ext_restart', &
      routineP = moduleN//':'//routineN

    CHARACTER(default_path_length)           :: r_file_path
    CHARACTER(default_string_length)         :: path
    INTEGER                                  :: handle, i_rep_val, &
                                                iforce_eval, myi, n_rep_val, &
                                                nforce_eval1, nforce_eval2
    LOGICAL                                  :: explicit1, explicit2, &
                                                failure, flag, flag2
    REAL(KIND=dp)                            :: myt
    TYPE(cp_error_type)                      :: sub_error
    TYPE(cp_parser_type), POINTER            :: cpparser
    TYPE(cp_unit_set_type), POINTER          :: default_units
    TYPE(section_type), POINTER              :: input_structure
    TYPE(section_vals_type), POINTER         :: r_section, restart_input, &
                                                section, section1, section2, &
                                                sections1, sections2, &
                                                work_section

  CALL timeset(routineN,handle)

  failure=.FALSE. 
  NULLIFY(work_section)
  IF (.NOT. failure) THEN
     r_section => section_vals_get_subs_vals(input_file,&
          "EXT_RESTART",error=error)
     CALL section_vals_val_get(r_section,"RESTART_FILE_NAME", &
          c_val=r_file_path, error=error)

     IF (r_file_path/=" ") THEN
        CALL cp_error_init(sub_error,template_error=error,stop_level=cp_fatal_level)
        ! parse the input
        NULLIFY(input_structure, default_units)
        CALL create_cp2k_root_section(input_structure,error=sub_error)
        NULLIFY(restart_input)
        CALL section_vals_create(restart_input,input_structure, error=sub_error)
        CALL section_release(input_structure,error=sub_error)
        NULLIFY(cpparser)
        CALL parser_create(cpparser,file_name=r_file_path,para_env=para_env,&
             error=sub_error)
        CALL cp_unit_set_create(default_units, "OUTPUT",error=sub_error)
        CALL section_vals_parse(restart_input,cpparser,root_section=.FALSE.,&
             default_units=default_units,error=sub_error)
        CALL cp_unit_set_release(default_units,error=sub_error)
        CALL parser_release(cpparser,error=sub_error)
        CALL cp_error_dealloc_ref(sub_error)

        ! Restart and input files same number of force_env sections
        sections1  => section_vals_get_subs_vals(restart_input,"FORCE_EVAL",error=error)
        CALL section_vals_get(sections1, n_repetition=nforce_eval1, error=error)
        sections2  => section_vals_get_subs_vals(input_file,"FORCE_EVAL",error=error)
        CALL section_vals_get(sections2, n_repetition=nforce_eval2, error=error)
        IF (nforce_eval1/=nforce_eval2) THEN
           CALL cp_assert(.FALSE.,cp_failure_level,cp_assertion_failed,&
                routineP,"Restart and input file MUST have the number of force_env sections",&
                error,failure)
        END IF

        DO iforce_eval = 1, nforce_eval1
           section1 => section_vals_get_subs_vals3(sections1,"SUBSYS",&
                i_rep_section=iforce_eval,error=error)
           section2 => section_vals_get_subs_vals3(sections2,"SUBSYS",&
                i_rep_section=iforce_eval,error=error)
!           WRITE(*,*)"TEO",iforce_eval,nforce_eval1,subsys_ind
           CALL section_vals_val_get(r_section,"RESTART_CELL",l_val=flag,error=error)
           IF (flag) THEN
              section  => section_vals_get_subs_vals(section1,"CELL",error=error)
              CALL section_vals_set_subs_vals(section2,"CELL",section,error=error)              
           END IF

           CALL section_vals_val_get(r_section,"RESTART_POS",l_val=flag,&
                error=error)
           IF (flag) THEN
              section => section_vals_get_subs_vals(section1,"COORD",error=error)
              CALL section_vals_set_subs_vals(section2,"COORD",section,error=error)
           END IF

           CALL section_vals_val_get(r_section,"RESTART_RANDOMG",l_val=flag,&
                error=error)
           IF (flag) THEN
              section => section_vals_get_subs_vals(section1,"RNG_INIT",error=error)
              CALL section_vals_set_subs_vals(section2,"RNG_INIT",section,error=error)
           END IF

           CALL section_vals_val_get(r_section,"RESTART_VEL",l_val=flag,&
                error=error)
           IF (flag) THEN
              section => section_vals_get_subs_vals(section1,"VELOCITY",error=error)
              CALL section_vals_set_subs_vals(section2,"VELOCITY",section,error=error)
           END IF

        END DO

        CALL section_vals_val_get(r_section,"RESTART_COUNTERS",l_val=flag,&
             error=error)
        IF (flag) THEN
           work_section => section_vals_get_subs_vals(input_file,"MOTION%MD",error=error)
           CALL section_vals_get(work_section,explicit=explicit1,error=error)
           work_section => section_vals_get_subs_vals(restart_input,"MOTION%MD",error=error)
           CALL section_vals_get(work_section,explicit=explicit2,error=error)
           IF (explicit1.AND.explicit2) THEN
              CALL section_vals_val_get(restart_input,"MOTION%MD%STEP_START_VAL",i_val=myi,error=error)
              CALL section_vals_val_get(restart_input,"MOTION%MD%TIME_START_VAL",r_val=myt,error=error)
              CALL section_vals_val_set(input_file,"MOTION%MD%STEP_START_VAL",i_val=myi,error=error)
              CALL section_vals_val_set(input_file,"MOTION%MD%TIME_START_VAL",r_val=myt,error=error)
           END IF
           !
           work_section => section_vals_get_subs_vals(input_file,"MOTION%METADYN",error=error)
           CALL section_vals_get(work_section,explicit=explicit1,error=error)
           work_section => section_vals_get_subs_vals(restart_input,"MOTION%METADYN",error=error)
           CALL section_vals_get(work_section,explicit=explicit2,error=error)
           CALL section_vals_val_get(r_section,"RESTART_METADYNAMICS",l_val=flag2,&
                error=error)
           IF (explicit1.AND.explicit2.AND.flag2) THEN
              CALL section_vals_val_get(restart_input,"MOTION%METADYN%STEP_START_VAL",i_val=myi,error=error)
              CALL section_vals_val_set(input_file,"MOTION%METADYN%STEP_START_VAL",i_val=myi,error=error)
              CALL section_vals_val_get(restart_input,"MOTION%METADYN%NHILLS_START_VAL",i_val=myi,error=error)
              CALL section_vals_val_set(input_file,"MOTION%METADYN%NHILLS_START_VAL",i_val=myi,error=error)
           END IF          
           !
           work_section => section_vals_get_subs_vals(input_file,"MOTION%MD%HMC",error=error)
           CALL section_vals_get(work_section,explicit=explicit1,error=error)
           work_section => section_vals_get_subs_vals(restart_input,"MOTION%MD%HMC",error=error)
           CALL section_vals_get(work_section,explicit=explicit2,error=error)
           IF (explicit1.AND.explicit2) THEN
              CALL section_vals_val_get(restart_input,"MOTION%MD%HMC%MD_APPROACH_START_VAL",i_val=myi,error=error)
              CALL section_vals_val_set(input_file,"MOTION%MD%HMC%MD_APPROACH_START_VAL",i_val=myi,error=error)
              CALL section_vals_val_get(restart_input,"MOTION%MD%HMC%ACCEPTED_MD_START_VAL",i_val=myi,error=error)
              CALL section_vals_val_set(input_file,"MOTION%MD%HMC%ACCEPTED_MD_START_VAL",i_val=myi,error=error)
           END IF
        END IF
        CALL section_vals_val_get(r_section,"RESTART_BAROSTAT",l_val=flag,&
             error=error)
        IF (flag) THEN
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%BAROSTAT%MASS",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%BAROSTAT%MASS",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%BAROSTAT%VELOCITY",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%BAROSTAT%VELOCITY",&
                section,error=error)
        END IF
        CALL section_vals_val_get(r_section,"RESTART_BAROSTAT_NOSE",l_val=flag,&
             error=error)
        IF (flag) THEN
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%BAROSTAT%NOSE%COORD",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%BAROSTAT%NOSE%COORD",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%BAROSTAT%NOSE%VELOCITY",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%BAROSTAT%NOSE%VELOCITY",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%BAROSTAT%NOSE%MASS",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%BAROSTAT%NOSE%MASS",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%BAROSTAT%NOSE%FORCE",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%BAROSTAT%NOSE%FORCE",&
                section,error=error)
        END IF
        CALL section_vals_val_get(r_section,"RESTART_KG_COEFF_POS",l_val=flag,&
             error=error)
        IF (flag) THEN
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%KG_COEFF%RESTART_INDEX",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%KG_COEFF%RESTART_INDEX",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%KG_COEFF%COORD",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%KG_COEFF%COORD",&
                section,error=error)
        END IF
        CALL section_vals_val_get(r_section,"RESTART_KG_COEFF_VEL",l_val=flag,&
             error=error)
        IF (flag) THEN
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%KG_COEFF%RESTART_INDEX",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%KG_COEFF%RESTART_INDEX",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%KG_COEFF%VELOCITY",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%KG_COEFF%VELOCITY",&
                section,error=error)
        END IF
        CALL section_vals_val_get(r_section,"RESTART_KG_NOSE",l_val=flag,&
             error=error)
        IF (flag) THEN
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%KG_COEFF%NOSE%COORD",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%KG_COEFF%NOSE%COORD",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%KG_COEFF%NOSE%VELOCITY",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%KG_COEFF%NOSE%VELOCITY",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%KG_COEFF%NOSE%MASS",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%KG_COEFF%NOSE%MASS",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%KG_COEFF%NOSE%FORCE",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%KG_COEFF%NOSE%FORCE",&
                section,error=error)
        END IF
        CALL section_vals_val_get(r_section,"RESTART_NOSE",l_val=flag,&
             error=error)
        IF (flag) THEN
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%NOSE%COORD",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%NOSE%COORD",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%NOSE%VELOCITY",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%NOSE%VELOCITY",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%NOSE%MASS",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%NOSE%MASS",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%MD%NOSE%FORCE",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%MD%NOSE%FORCE",&
                section,error=error)
        END IF
        CALL section_vals_val_get(r_section,"RESTART_METADYNAMICS",l_val=flag,&
             error=error)
        IF (flag) THEN
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%METADYN%SPAWNED_HILLS_POS",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%METADYN%SPAWNED_HILLS_POS",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%METADYN%SPAWNED_HILLS_AMPL",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%METADYN%SPAWNED_HILLS_AMPL",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%METADYN%SPAWNED_HILLS_HEIGHT",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%METADYN%SPAWNED_HILLS_HEIGHT",&
                section,error=error)
           ! Extended Lagrangian
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%METADYN%EXT_LAGRANGE_SS0",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%METADYN%EXT_LAGRANGE_SS0",&
                section,error=error)
           section => section_vals_get_subs_vals(restart_input,&
                "MOTION%METADYN%EXT_LAGRANGE_VVP",error=error)
           CALL section_vals_set_subs_vals(input_file,"MOTION%METADYN%EXT_LAGRANGE_VVP",&
                section,error=error)
        END IF
        CALL section_vals_val_get(r_section,"CUSTOM_PATH",n_rep_val=n_rep_val,&
             error=error)
        DO i_rep_val=1,n_rep_val
           CALL section_vals_val_get(r_section,"CUSTOM_PATH",&
                i_rep_val=i_rep_val,c_val=path,&
                error=error)
           IF (path/=" ") THEN
              section => section_vals_get_subs_vals(restart_input,&
                   path,error=error)
              CALL section_vals_set_subs_vals(input_file,path,&
                   section,error=error)
           END IF
        END DO
        CALL section_vals_val_set(r_section,"RESTART_FILE_NAME",&
             c_val=" ",error=error)
        CALL section_vals_release(restart_input,error=error)
     END IF
  END IF
    CALL timestop(handle)
END SUBROUTINE handle_ext_restart
!***************************************************************************

END MODULE input_cp2k_check
