!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000 - 2008  CP2K developers group                          !
!-----------------------------------------------------------------------------!

! *****************************************************************************
!> \brief  Handles all functions used to read and interpret AMBER coordinates
!>         and topology files
!> \author Teodoro Laino [tlaino] - University of Zurich 10.2008
! *****************************************************************************
MODULE topology_amber
  USE convert_units,                   ONLY: convert_to_cp2k_units
  USE cp_output_handling,              ONLY: cp_print_key_finished_output,&
                                             cp_print_key_unit_nr
  USE cp_para_types,                   ONLY: cp_para_env_type
  USE cp_parser_methods,               ONLY: parser_get_next_line,&
                                             parser_get_object
  USE cp_parser_types,                 ONLY: cp_parser_type,&
                                             parser_create,&
                                             parser_release
  USE f77_blas
  USE input_cp2k_restarts,             ONLY: section_velocity_val_set
  USE input_section_types,             ONLY: section_vals_get_subs_vals,&
                                             section_vals_type
  USE kinds,                           ONLY: default_string_length,&
                                             dp
  USE memory_utilities,                ONLY: reallocate
  USE timings,                         ONLY: timeset,&
                                             timestop
  USE topology_types,                  ONLY: atom_info_type,&
                                             topology_parameters_type
#include "cp_common_uses.h"

  IMPLICIT NONE

  CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'topology_amber'
  REAL(KIND=dp), PARAMETER, PUBLIC     :: amber_conv_factor = 20.455_dp

  PRIVATE
  PUBLIC :: read_coordinate_crd

CONTAINS

! *****************************************************************************
!> \brief  Reads the `coord' version generated by the PARM or LEaP programs, as
!>         well as the  `restrt' version, resulting from  energy minimization or
!>         molecular dynamics in SANDER or GIBBS. It may contain velocity and 
!>         periodic box information. 
!>         
!>         Official Format from the AMBER homepage
!>         FORMAT(20A4) ITITL
!>           ITITL  : the title of the current run, from the AMBER
!>                    parameter/topology file
!>         
!>         FORMAT(I5,5E15.7) NATOM,TIME
!>           NATOM  : total number of atoms in coordinate file
!>           TIME   : option, current time in the simulation (picoseconds)
!>         
!>         FORMAT(6F12.7) (X(i), Y(i), Z(i), i = 1,NATOM)
!>           X,Y,Z  : coordinates
!>
!>         IF dynamics
!>         
!>         FORMAT(6F12.7) (VX(i), VY(i), VZ(i), i = 1,NATOM)
!>           VX,VY,VZ : velocities (units: Angstroms per 1/20.455 ps)
!>         
!>         IF constant pressure (in 4.1, also constant volume)
!>         
!>         FORMAT(6F12.7) BOX(1), BOX(2), BOX(3)
!>           BOX    : size of the periodic box
!>       
!> 
!> \author Teodoro Laino [tlaino] - University of Zurich 10.2008
! *****************************************************************************
  SUBROUTINE read_coordinate_crd (topology,para_env,subsys_section,error)
    TYPE(topology_parameters_type)           :: topology
    TYPE(cp_para_env_type), POINTER          :: para_env
    TYPE(section_vals_type), POINTER         :: subsys_section
    TYPE(cp_error_type), INTENT(inout)       :: error

    CHARACTER(len=*), PARAMETER :: routineN = 'read_coordinate_crd', &
      routineP = moduleN//':'//routineN

    CHARACTER(LEN=default_string_length)     :: string
    INTEGER                                  :: handle, iw, j, natom, stat
    LOGICAL                                  :: failure, my_end, &
                                                setup_velocities
    REAL(KIND=dp), DIMENSION(:, :), POINTER  :: velocity
    TYPE(atom_info_type), POINTER            :: atom_info
    TYPE(cp_logger_type), POINTER            :: logger
    TYPE(cp_parser_type), POINTER            :: parser
    TYPE(section_vals_type), POINTER         :: velocity_section

    NULLIFY(parser, logger, velocity)
    logger => cp_error_get_logger(error)
    iw = cp_print_key_unit_nr(logger,subsys_section,"PRINT%TOPOLOGY_INFO/CRD_INFO",&
         extension=".subsysLog",error=error)
    CALL timeset(routineN,handle)

    atom_info => topology%atom_info
    IF (iw>0)  WRITE(iw,*) "    Reading in CRD file ",TRIM(topology%coord_file_name)

    ! Title Section
    IF(iw>0) WRITE(iw,'(T2,A)') 'CRD_INFO| Parsing the TITLE section'
    CALL parser_create(parser,topology%coord_file_name,para_env=para_env,error=error)
    CALL parser_get_next_line(parser,1,error=error)
    CALL parser_get_object(parser,string,string_length=default_string_length,error=error)
    IF(iw>0) WRITE(iw,'(T2,A)') 'CRD_INFO| '//TRIM(string)
    ! Natom and Time (which we ignore)
    CALL parser_get_next_line(parser,1,error=error)
    CALL parser_get_object(parser,natom,error=error)
    topology%natoms = natom
    IF(iw>0) WRITE(iw,'(T2,A,I0)') 'CRD_INFO| Number of atoms: ',natom
    CALL reallocate(atom_info%label_molname, 1,    natom)
    CALL reallocate(atom_info%label_resname, 1,    natom)
    CALL reallocate(atom_info%label_resid,   1,    natom)
    CALL reallocate(atom_info%label_atmname, 1,    natom)
    CALL reallocate(atom_info%r,             1,3,1,natom)
    CALL reallocate(atom_info%atm_mass,      1,    natom)
    CALL reallocate(atom_info%atm_charge,    1,    natom)
    CALL reallocate(atom_info%occup,         1,    natom)
    CALL reallocate(atom_info%beta,          1,    natom)
    CALL reallocate(atom_info%element,       1,    natom)    
    ! Coordinates
    topology%aa_element        = .TRUE.
    topology%molname_generated = .TRUE.
    CALL parser_get_next_line(parser,1,at_end=my_end,error=error)
    DO j = 1, natom-MOD(natom,2), 2
       IF (my_end) EXIT
       READ(parser%input_line,*)atom_info%r(1,j  ),atom_info%r(2,j  ),atom_info%r(3,j  ),&
                                atom_info%r(1,j+1),atom_info%r(2,j+1),atom_info%r(3,j+1)
       ! All these information will have to be setup elsewhere..
       ! CRD file does not contain anything related..
       atom_info%label_atmname(j  ) = "__UNDEF__"
       atom_info%label_molname(j  ) = "__UNDEF__"
       atom_info%label_resname(j  ) = "__UNDEF__"
       atom_info%element      (j  ) = "__UNDEF__"
       atom_info%label_resid  (j  ) =  HUGE(0)
       atom_info%atm_mass     (j  ) =  HUGE(0.0_dp)
       atom_info%atm_charge   (j  ) = -HUGE(0.0_dp)
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(1,j  ))
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(2,j  ))
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(3,j  ))

       atom_info%label_atmname(j+1) = "__UNDEF__"
       atom_info%label_molname(j+1) = "__UNDEF__"
       atom_info%label_resname(j+1) = "__UNDEF__"
       atom_info%element      (j+1) = "__UNDEF__"
       atom_info%label_resid  (j+1) =  HUGE(0)
       atom_info%atm_mass     (j+1) =  HUGE(0.0_dp)
       atom_info%atm_charge   (j+1) = -HUGE(0.0_dp)
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(1,j+1))
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(2,j+1))
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(3,j+1))

       CALL parser_get_next_line(parser,1,at_end=my_end,error=error)
    END DO
    ! Trigger error
    IF ((my_end).AND.(j/=natom-MOD(natom,2)+1)) THEN
       CALL cp_assert(j==natom,cp_fatal_level,cp_assertion_failed,routineP,&
            "Error while reading CRD file. Unexpected end of file."//&
CPSourceFileRef,&
            only_ionode=.TRUE.)
    ELSE IF (MOD(natom,2)/=0) THEN
       ! In case let's handle the last atom
       j = natom
       READ(parser%input_line,*)atom_info%r(1,j  ),atom_info%r(2,j  ),atom_info%r(3,j  )
       ! All these information will have to be setup elsewhere..
       ! CRD file does not contain anything related..
       atom_info%label_atmname(j  ) = "__UNDEF__"
       atom_info%label_molname(j  ) = "__UNDEF__"
       atom_info%label_resname(j  ) = "__UNDEF__"
       atom_info%element      (j  ) = "__UNDEF__"
       atom_info%label_resid  (j  ) =  HUGE(0)
       atom_info%atm_mass     (j  ) =  HUGE(0.0_dp)
       atom_info%atm_charge   (j  ) = -HUGE(0.0_dp)
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(1,j  ))
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(2,j  ))
       CALL convert_to_cp2k_units("ANGSTROM",length=atom_info%r(3,j  ))

       CALL parser_get_next_line(parser,1,at_end=my_end,error=error)
    END IF

    IF (my_end) THEN
       CALL cp_assert(j==natom,cp_warning_level,cp_assertion_failed,routineP,&
            "No VELOCITY or BOX information found in CRD file. "//&
CPSourceFileRef,&
            only_ionode=.TRUE.)
    ELSE
       ! Velocities
       CALL reallocate(velocity,1,3,1,natom)
       DO j = 1, natom-MOD(natom,2), 2
          IF (my_end) EXIT
          READ(parser%input_line,*)velocity(1,j  ),velocity(2,j  ),velocity(3,j  ),&
                                   velocity(1,j+1),velocity(2,j+1),velocity(3,j+1)

          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(1,j  ))
          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(2,j  ))
          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(3,j  ))
          CALL convert_to_cp2k_units("PS",time=velocity(1,j  ),t_power=-1)
          CALL convert_to_cp2k_units("PS",time=velocity(2,j  ),t_power=-1)
          CALL convert_to_cp2k_units("PS",time=velocity(3,j  ),t_power=-1)
          velocity(1:3,j  ) = velocity(1:3,j  )*amber_conv_factor

          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(1,j+1))
          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(2,j+1))
          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(3,j+1))
          CALL convert_to_cp2k_units("PS",time=velocity(1,j+1),t_power=-1)
          CALL convert_to_cp2k_units("PS",time=velocity(2,j+1),t_power=-1)
          CALL convert_to_cp2k_units("PS",time=velocity(3,j+1),t_power=-1)
          velocity(1:3,j+1) = velocity(1:3,j+1)*amber_conv_factor

          CALL parser_get_next_line(parser,1,at_end=my_end,error=error)
       END DO
       setup_velocities = .TRUE.
       IF ((my_end).AND.(j/=natom-MOD(natom,2)+1)) THEN
          CALL cp_assert(j==natom,cp_warning_level,cp_assertion_failed,routineP,&
               "No VELOCITY information found in CRD file. Ignoring BOX information. "//&
               "Please provide the BOX information directly from the main CP2K input! "//&
CPSourceFileRef,&
               only_ionode=.TRUE.)
          setup_velocities = .FALSE.
       ELSE IF (MOD(natom,2)/=0) THEN
          ! In case let's handle the last atom
          j = natom
          READ(parser%input_line,*)velocity(1,j  ),velocity(2,j  ),velocity(3,j  )

          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(1,j  ))
          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(2,j  ))
          CALL convert_to_cp2k_units("ANGSTROM",length=velocity(3,j  ))
          CALL convert_to_cp2k_units("PS",time=velocity(1,j  ),t_power=-1)
          CALL convert_to_cp2k_units("PS",time=velocity(2,j  ),t_power=-1)
          CALL convert_to_cp2k_units("PS",time=velocity(3,j  ),t_power=-1)
          velocity(1:3,j  ) = velocity(1:3,j  )*amber_conv_factor

          CALL parser_get_next_line(parser,1,at_end=my_end,error=error)
       END IF
       IF (setup_velocities) THEN
          velocity_section => section_vals_get_subs_vals(subsys_section,"VELOCITY",error=error)
          CALL section_velocity_val_set(velocity_section, velocity=velocity, &
               conv_factor=1.0_dp, error=error)
       END IF
       DEALLOCATE(velocity,STAT=stat)
       CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
    END IF
    IF (my_end) THEN
       CALL cp_assert(j==natom,cp_warning_level,cp_assertion_failed,routineP,&
            "BOX information missing in CRD file. "//&
CPSourceFileRef,&
            only_ionode=.TRUE.)    
    ELSE
       CALL cp_assert(j==natom,cp_warning_level,cp_assertion_failed,routineP,&
            "BOX information found in CRD file. They will be ignored."//&
            "Please provide the BOX information directly from the main CP2K input!"//&
CPSourceFileRef,&
            only_ionode=.TRUE.)
    END IF
    CALL parser_release(parser,error=error)
    CALL cp_print_key_finished_output(iw,logger,subsys_section,&
         "PRINT%TOPOLOGY_INFO/CRD_INFO",error=error)
    CALL timestop(handle)

  END SUBROUTINE read_coordinate_crd

END MODULE topology_amber

