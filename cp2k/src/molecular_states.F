!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000 - 2007  CP2K developers group                          !
!-----------------------------------------------------------------------------!


!!****** cp2k/molecular_states [1.0] *
!!
!!   NAME
!!     molecular_states
!!
!!   FUNCTION
!!     Routines for the calculation of molecular states
!!
!!   AUTHOR
!!     CJM
!!
!!   MODIFICATION HISTORY
!!
!!   SOURCE
!******************************************************************************

MODULE molecular_states
! *****************************************************************************
  USE atomic_kind_types,               ONLY: atomic_kind_type
  USE cell_types,                      ONLY: cell_type
  USE coefficient_types,               ONLY: coeff_type
  USE cp_control_types,                ONLY: dft_control_type
  USE cp_fm_basic_linalg,              ONLY: cp_fm_gemm
  USE cp_fm_diag,                      ONLY: cp_fm_syevd
  USE cp_fm_struct,                    ONLY: cp_fm_struct_create,&
                                             cp_fm_struct_release,&
                                             cp_fm_struct_type
  USE cp_fm_types,                     ONLY: cp_fm_create,&
                                             cp_fm_get_element,&
                                             cp_fm_get_info,&
                                             cp_fm_release,&
                                             cp_fm_to_fm,&
                                             cp_fm_type
  USE cp_output_handling,              ONLY: cp_p_file,&
                                             cp_print_key_finished_output,&
                                             cp_print_key_should_output,&
                                             cp_print_key_unit_nr
  USE cp_para_types,                   ONLY: cp_para_env_type
  USE cp_sm_fm_interactions,           ONLY: cp_sm_fm_multiply
  USE input_section_types,             ONLY: section_get_ival,&
                                             section_vals_type
  USE kinds,                           ONLY: default_string_length,&
                                             dp
  USE message_passing,                 ONLY: mp_bcast,&
                                             mp_maxloc
  USE molecule_types_new,              ONLY: molecule_type
  USE particle_types,                  ONLY: particle_type
  USE pw_env_types,                    ONLY: pw_env_type
  USE qs_collocate_density,            ONLY: calculate_wavefunction
  USE qs_environment_types,            ONLY: get_qs_env,&
                                             qs_environment_type
  USE realspace_grid_cube,             ONLY: rs_pw_to_cube
  USE sparse_matrix_types,             ONLY: real_matrix_type
  USE termination,                     ONLY: stop_memory
  USE timings,                         ONLY: timeset,&
                                             timestop
#include "cp_common_uses.h"

  IMPLICIT NONE

  PRIVATE

! *** Global parameters ***

  CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'molecular_states'

  LOGICAL, PARAMETER, PRIVATE :: debug_this_module=.FALSE.

! *** Public subroutines ***

  PUBLIC :: construct_molecular_states

! *****************************************************************************

CONTAINS

! *****************************************************************************

  SUBROUTINE construct_molecular_states(molecule_set, mo_localized, &
       mo_coeff, mo_eigenvalues, Hks, matrix_S, qs_env, wf_r, wf_g,&
       force_env_section, error)


    TYPE(molecule_type), DIMENSION(:), &
      POINTER                                :: molecule_set
    TYPE(cp_fm_type), POINTER                :: mo_localized, mo_coeff
    REAL(KIND=dp), DIMENSION(:), POINTER     :: mo_eigenvalues
    TYPE(real_matrix_type), POINTER          :: Hks, matrix_S
    TYPE(qs_environment_type), POINTER       :: qs_env
    TYPE(coeff_type), INTENT(INOUT)          :: wf_r, wf_g
    TYPE(section_vals_type), POINTER         :: force_env_section
    TYPE(cp_error_type), INTENT(INOUT)       :: error

    CHARACTER(LEN=default_string_length)     :: filename
    INTEGER                                  :: i, imol, iproc, isos, j, k, &
                                                ncol_global, nproc, &
                                                nrow_global, ns, output_unit, &
                                                unit_nr, unit_report
    INTEGER, DIMENSION(:), POINTER           :: ind
    INTEGER, POINTER                         :: nstates(:), states(:)
    LOGICAL                                  :: failure
    REAL(KIND=dp)                            :: tmp
    REAL(KIND=dp), ALLOCATABLE               :: evals( : )
    TYPE(atomic_kind_type), DIMENSION(:), &
      POINTER                                :: atomic_kind_set
    TYPE(cell_type), POINTER                 :: cell
    TYPE(cp_fm_struct_type), POINTER         :: fm_struct_tmp
    TYPE(cp_fm_type), POINTER                :: b, c, d, D_igk, e_vectors, &
                                                rot_e_vectors, smo
    TYPE(cp_logger_type), POINTER            :: logger
    TYPE(cp_para_env_type), POINTER          :: para_env
    TYPE(dft_control_type), POINTER          :: dft_control
    TYPE(particle_type), DIMENSION(:), &
      POINTER                                :: particle_set
    TYPE(pw_env_type), POINTER               :: pw_env

    failure = .FALSE.
    NULLIFY(logger)
    logger => cp_error_get_logger(error)
    !-----------------------------------------------------------------------------
    ! 1.
    !-----------------------------------------------------------------------------
    para_env => qs_env % para_env
    nproc = para_env%num_pe
    output_unit = -1
    IF (para_env%ionode) output_unit = cp_logger_get_default_unit_nr(logger)

    !-----------------------------------------------------------------------------
    !-----------------------------------------------------------------------------
    ! 2.
    !-----------------------------------------------------------------------------
    unit_report=cp_print_key_unit_nr(logger,force_env_section,"DFT%PRINT%MOLECULAR_STATES",&
         extension=".data",middle_name="Molecular_DOS",log_filename=.FALSE.,error=error)
    IF (unit_report>0) THEN
       WRITE(unit_report,*) SIZE(mo_eigenvalues)," number of states "
       DO i=1,SIZE(mo_eigenvalues)
          WRITE(unit_report,*) mo_eigenvalues(i)
       ENDDO
    ENDIF

    !-----------------------------------------------------------------------------
    !-----------------------------------------------------------------------------
    ! 3.
    !-----------------------------------------------------------------------------
    CALL cp_fm_get_info(mo_localized, &
                        ncol_global=ncol_global, &
                        nrow_global=nrow_global ,error=error)
    NULLIFY(smo)
    CALL cp_fm_create(smo,mo_coeff%matrix_struct,error=error)
    CALL cp_sm_fm_multiply(matrix_S,mo_coeff,smo,ncol_global,error=error)

    !-----------------------------------------------------------------------------
    !-----------------------------------------------------------------------------
    ! 4.
    !-----------------------------------------------------------------------------
    ALLOCATE(nstates(2),STAT=isos)
    IF(isos/=0) CALL stop_memory('construct_molecular_states','nstates')

    DO imol = 1, SIZE(molecule_set)
       nstates(1) = molecule_set(imol)%lmi%nstates
       nstates(2) = para_env%mepos

       CALL mp_maxloc(nstates,para_env%group)

       NULLIFY(states)
       ALLOCATE(states(nstates(1)),STAT=isos)
       IF(isos/=0) CALL stop_memory('construct_molecular_states','states')
       states(:) = 0

       iproc=nstates(2)
       IF(iproc == para_env%mepos) THEN
          states(:) = molecule_set(imol)%lmi%states(:)
       END IF
       !!BCAST from here root = iproc
       CALL mp_bcast(states,iproc,para_env%group)

       ns = nstates(1)
       ind => states( : )
       ALLOCATE ( evals ( ns ), STAT = isos )
       IF ( isos /= 0 ) CALL stop_memory ( "construct_molecular_states", &
            "eval", ns )

       NULLIFY(b,c,d,fm_struct_tmp,e_vectors,rot_e_vectors)


       CALL cp_fm_struct_create(fm_struct_tmp, nrow_global=nrow_global, &
            ncol_global=ns, &
            para_env=mo_localized%matrix_struct%para_env, &
            context=mo_localized%matrix_struct%context,error=error)

       CALL cp_fm_create(b,fm_struct_tmp, name="b",error=error)
       CALL cp_fm_create(c,fm_struct_tmp, name="c",error=error)
       CALL cp_fm_create(rot_e_vectors,fm_struct_tmp, name="rot_e_vectors",error=error)

       CALL cp_fm_struct_release(fm_struct_tmp,error=error)

       CALL cp_fm_struct_create(fm_struct_tmp, nrow_global=ns,  ncol_global=ns, &
            para_env=mo_localized%matrix_struct%para_env, &
            context=mo_localized%matrix_struct%context,error=error)

       CALL cp_fm_create(d,fm_struct_tmp, name="d",error=error)
       CALL cp_fm_create(e_vectors,fm_struct_tmp, name="e_vectors",error=error)
       CALL cp_fm_struct_release(fm_struct_tmp,error=error)

       DO i=1,ns
          CALL cp_fm_to_fm ( mo_localized, b, 1, ind ( i ), i)
       END DO

       CALL cp_sm_fm_multiply(Hks,b,c,ns,error=error)

       CALL cp_fm_gemm('T','N',ns,ns,nrow_global,1.0_dp, &
            b,c,0.0_dp,d,error=error)

       CALL cp_fm_syevd ( d, e_vectors, evals ,error=error)

       IF (output_unit>0) WRITE(output_unit,*)""
       IF (output_unit>0) WRITE(output_unit,*)"MOLECULE ",imol
       IF (output_unit>0) WRITE(output_unit,*)"NUMBER OF STATES  ", ns
       IF (output_unit>0) WRITE(output_unit,*)"EIGENVALUES"
       IF (output_unit>0) WRITE(output_unit,*)""

       DO k=1,ns
          IF (output_unit>0) WRITE(output_unit,*) evals(k)
       END DO
       IF (unit_report>0) THEN
          WRITE(unit_report,*) imol,ns, " imol, number of states"
          DO k=1,ns
             WRITE(unit_report,*) evals(k)
          ENDDO
       ENDIF

       CALL cp_fm_gemm('N','N',nrow_global,ns,ns,1.0_dp, &
            b,e_vectors,0.0_dp,rot_e_vectors,error=error)

       DEALLOCATE ( evals,  STAT = isos )
       IF ( isos /= 0 ) CALL stop_memory ( "construct_molecular_states", &
            "eval", ns )

       ! compute Eq. 6 from P. Hunt et al. (CPL 376, p. 68-74)
       CALL cp_fm_struct_create(fm_struct_tmp, nrow_global=ns, &
            ncol_global=ncol_global, &
            para_env=mo_localized%matrix_struct%para_env, &
            context=mo_localized%matrix_struct%context,error=error)
       CALL cp_fm_create(D_igk,fm_struct_tmp,error=error)
       CALL cp_fm_struct_release(fm_struct_tmp,error=error)
       CALL cp_fm_gemm('T','N',ns,ncol_global,nrow_global,1.0_dp, &
            rot_e_vectors,smo,0.0_dp,D_igk,error=error)
       DO i=1,ns
          DO k=1,ncol_global
             CALL cp_fm_get_element(D_igk,i,k,tmp)
             IF (unit_report>0) THEN
                WRITE(unit_report,*) tmp**2
             ENDIF
          ENDDO
       ENDDO
       CALL cp_fm_release(D_igk,error=error)

       IF ( BTEST(cp_print_key_should_output(logger%iter_info,force_env_section,&
            "DFT%PRINT%MOLECULAR_STATES%CUBES",error=error),cp_p_file) ) THEN
          DO i=1,ns
             j=ind(i)

             CALL get_qs_env(qs_env=qs_env,&
                  atomic_kind_set=atomic_kind_set,&
                  cell=cell,&
                  dft_control=dft_control,&
                  particle_set=particle_set,&
                  pw_env=pw_env,error=error)

             CALL calculate_wavefunction(rot_e_vectors,i,wf_r, &
                  wf_g, atomic_kind_set,cell,dft_control,particle_set, &
                  pw_env, error = error )

             WRITE(filename,'(a9,I2.2,a1,I3.3)')"MOLECULE_",imol,"_",j
             unit_nr=cp_print_key_unit_nr(logger,force_env_section,&
                  "DFT%PRINT%MOLECULAR_STATES%CUBES",&
                  extension=".cube",middle_name=TRIM(filename),log_filename=.FALSE.,error=error)
             CALL rs_pw_to_cube(wf_r%pw,unit_nr,para_env%ionode,filename,&
                  stride=section_get_ival(force_env_section,&
                  "DFT%PRINT%MOLECULAR_STATES%CUBES%STRIDE",error=error), error=error)
             CALL cp_print_key_finished_output(unit_nr,logger,force_env_section,&
                  "DFT%PRINT%MOLECULAR_STATES%CUBES",error=error)
             IF (output_unit>0) WRITE(output_unit,*) filename
          END DO
       ENDIF

       CALL cp_fm_release ( b ,error=error)
       CALL cp_fm_release ( c ,error=error)
       CALL cp_fm_release ( d ,error=error)
       CALL cp_fm_release ( e_vectors ,error=error)
       CALL cp_fm_release ( rot_e_vectors ,error=error)

       DEALLOCATE(states,STAT=isos)
       IF(isos/=0) CALL stop_memory('construct_molecular_states','states')

    END DO
    CALL cp_fm_release(smo,error=error)
    DEALLOCATE(nstates,STAT=isos)
    IF(isos/=0) CALL stop_memory('construct_molecular_states','nstates')
    CALL cp_print_key_finished_output(unit_report,logger,force_env_section,&
         "DFT%PRINT%MOLECULAR_STATES",error=error)
    !------------------------------------------------------------------------------
  END SUBROUTINE construct_molecular_states

!------------------------------------------------------------------------------
!------------------------------------------------------------------------------

END MODULE molecular_states
